#include <memory>
#include <string>
#include <unordered_map>
#include <vector>

#include "parser/mysql//errcode.hh"

using namespace std;

namespace mysql {

shared_ptr<ErrMessage> Message(string message, vector<int> &&redactArgs) {
    return make_shared<ErrMessage>(message, std::move(redactArgs));
}

unordered_map<uint16_t, shared_ptr<ErrMessage>> MySQLErrName = {
    {ErrHashchk, Message("hashchk", {})},
    {ErrNisamchk, Message("isamchk", {})},
    {ErrNo, Message("NO", {})},
    {ErrYes, Message("YES", {})},
    {ErrCantCreateFile, Message("Can't create file '%-.200s' (errno: %d - %s)", {})},
    {ErrCantCreateTable, Message("Can't create table '%-.200s' (errno: %d)", {})},
    {ErrCantCreateDB, Message("Can't create database '%-.192s' (errno: %d)", {})},
    {ErrDBCreateExists, Message("Can't create database '%-.192s'; database exists", {})},
    {ErrDBDropExists, Message("Can't drop database '%-.192s'; database doesn't exist", {})},
    {ErrDBDropDelete, Message("Error dropping database (can't delete '%-.192s', errno: %d)", {})},
    {ErrDBDropRmdir, Message("Error dropping database (can't rmdir '%-.192s', errno: %d)", {})},
    {ErrCantDeleteFile, Message("Error on delete of '%-.192s' (errno: %d - %s)", {})},
    {ErrCantFindSystemRec, Message("Can't read record in system table", {})},
    {ErrCantGetStat, Message("Can't get status of '%-.200s' (errno: %d - %s)", {})},
    {ErrCantGetWd, Message("Can't get working directory (errno: %d - %s)", {})},
    {ErrCantLock, Message("Can't lock file (errno: %d - %s)", {})},
    {ErrCantOpenFile, Message("Can't open file: '%-.200s' (errno: %d - %s)", {})},
    {ErrFileNotFound, Message("Can't find file: '%-.200s' (errno: %d - %s)", {})},
    {ErrCantReadDir, Message("Can't read dir of '%-.192s' (errno: %d - %s)", {})},
    {ErrCantSetWd, Message("Can't change dir to '%-.192s' (errno: %d - %s)", {})},
    {ErrCheckread, Message("Record has changed since last read in table '%-.192s'", {})},
    {ErrDiskFull, Message("Disk full (%s); waiting for someone to free some space... (errno: %d - %s)", {})},
    {ErrDupKey, Message("Can't write; duplicate key in table '%-.192s'", {})},
    {ErrErrorOnClose, Message("Error on close of '%-.192s' (errno: %d - %s)", {})},
    {ErrErrorOnRead, Message("Error reading file '%-.200s' (errno: %d - %s)", {})},
    {ErrErrorOnRename, Message("Error on rename of '%-.210s' to '%-.210s' (errno: %d - %s)", {})},
    {ErrErrorOnWrite, Message("Error writing file '%-.200s' (errno: %d - %s)", {})},
    {ErrFileUsed, Message("'%-.192s' is locked against change", {})},
    {ErrFilsortAbort, Message("Sort aborted", {})},
    {ErrFormNotFound, Message("View '%-.192s' doesn't exist for '%-.192s'", {})},
    {ErrGetErrno, Message("Got error %d from storage engine", {})},
    {ErrIllegalHa, Message("Table storage engine for '%-.192s' doesn't have this option", {})},
    {ErrKeyNotFound, Message("Can't find record in '%-.192s'", {})},
    {ErrNotFormFile, Message("Incorrect information in file: '%-.200s'", {})},
    {ErrNotKeyFile, Message("Incorrect key file for table '%-.200s'; try to repair it", {})},
    {ErrOldKeyFile, Message("Old key file for table '%-.192s'; repair it!", {})},
    {ErrOpenAsReadonly, Message("Table '%-.192s' is read only", {})},
    {ErrOutofMemory, Message("Out of memory; restart server and try again (needed %d bytes)", {})},
    {ErrOutOfSortMemory, Message("Out of sort memory, consider increasing server sort buffer size", {})},
    {ErrUnexpectedEOF, Message("Unexpected EOF found when reading file '%-.192s' (errno: %d - %s)", {})},
    {ErrConCount, Message("Too many connections", {})},
    {ErrOutOfResources,
     Message("Out of memory; check if mysqld or some other process uses all available memory; if not, you may have to "
             "use 'ulimit' to allow mysqld to use more memory or you can add more swap space",
             {})},
    {ErrBadHost, Message("Can't get hostname for your address", {})},
    {ErrHandshake, Message("Bad handshake", {})},
    {ErrDBaccessDenied, Message("Access denied for user '%-.48s'@'%-.64s' to database '%-.192s'", {})},
    {ErrAccessDenied, Message("Access denied for user '%-.48s'@'%-.64s' (using password: %s)", {})},
    {ErrNoDB, Message("No database selected", {})},
    {ErrUnknownCom, Message("Unknown command", {})},
    {ErrBadNull, Message("Column '%-.192s' cannot be null", {})},
    {ErrBadDB, Message("Unknown database '%-.192s'", {})},
    {ErrTableExists, Message("Table '%-.192s' already exists", {})},
    {ErrBadTable, Message("Unknown table '%-.100s'", {})},
    {ErrNonUniq, Message("Column '%-.192s' in %-.192s is ambiguous", {})},
    {ErrServerShutdown, Message("Server shutdown in progress", {})},
    {ErrBadField, Message("Unknown column '%-.192s' in '%-.192s'", {})},
    {ErrFieldNotInGroupBy,
     Message(
         "Expression #%d of %s is not in GROUP BY clause and contains nonaggregated column '%s' which is not "
         "functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by",
         {})},
    {ErrWrongGroupField, Message("Can't group on '%-.192s'", {})},
    {ErrWrongSumSelect, Message("Statement has sum functions and columns in same statement", {})},
    {ErrWrongValueCount, Message("Column count doesn't match value count", {})},
    {ErrTooLongIdent, Message("Identifier name '%-.100s' is too long", {})},
    {ErrDupFieldName, Message("Duplicate column name '%-.192s'", {})},
    {ErrDupKeyName, Message("Duplicate key name '%-.192s'", {})},
    {ErrDupEntry, Message("Duplicate entry '%-.64s' for key '%-.192s'", {})},
    {ErrWrongFieldSpec, Message("Incorrect column specifier for column '%-.192s'", {})},
    {ErrParse, Message("%s %s", {})},
    {ErrEmptyQuery, Message("Query was empty", {})},
    {ErrNonuniqTable, Message("Not unique table/alias: '%-.192s'", {})},
    {ErrInvalidDefault, Message("Invalid default value for '%-.192s'", {})},
    {ErrMultiplePriKey, Message("Multiple primary key defined", {})},
    {ErrTooManyKeys, Message("Too many keys specified; max %d keys allowed", {})},
    {ErrTooManyKeyParts, Message("Too many key parts specified; max %d parts allowed", {})},
    {ErrTooLongKey, Message("Specified key was too long; max key length is %d bytes", {})},
    {ErrKeyColumnDoesNotExits, Message("Key column '%-.192s' doesn't exist in table", {})},
    {ErrBlobUsedAsKey,
     Message("BLOB column '%-.192s' can't be used in key specification with the used table type", {})},
    {ErrTooBigFieldlength,
     Message("Column length too big for column '%-.192s' (max = %d); use BLOB or TEXT instead", {})},
    {ErrWrongAutoKey,
     Message("Incorrect table definition; there can be only one auto column and it must be defined as a key", {})},
    {ErrReady, Message("%s: ready for connections.\nVersion: '%s'  socket: '%s'  port: %d", {})},
    {ErrNormalShutdown, Message("%s: Normal shutdown\n", {})},
    {ErrGotSignal, Message("%s: Got signal %d. Aborting!\n", {})},
    {ErrShutdownComplete, Message("%s: Shutdown complete\n", {})},
    {ErrForcingClose, Message("%s: Forcing close of thread %d  user: '%-.48s'\n", {})},
    {ErrIpsock, Message("Can't create IP socket", {})},
    {ErrNoSuchIndex, Message("Table '%-.192s' has no index like the one used in CREATE INDEX; recreate the table", {})},
    {ErrWrongFieldTerminators, Message("Field separator argument is not what is expected; check the manual", {})},
    {ErrBlobsAndNoTerminated,
     Message("You can't use fixed rowlength with BLOBs; please use 'fields terminated by'", {})},
    {ErrTextFileNotReadable, Message("The file '%-.128s' must be in the database directory or be readable by all", {})},
    {ErrFileExists, Message("File '%-.200s' already exists", {})},
    {ErrLoadInfo, Message("Records: %d  Deleted: %d  Skipped: %d  Warnings: %d", {})},
    {ErrAlterInfo, Message("Records: %d  Duplicates: %d", {})},
    {ErrWrongSubKey, Message("Incorrect prefix key; the used key part isn't a string, the used length is longer than "
                             "the key part, or the storage engine doesn't support unique prefix keys",
                             {})},
    {ErrCantRemoveAllFields, Message("You can't delete all columns with ALTER TABLE; use DROP TABLE instead", {})},
    {ErrCantDropFieldOrKey, Message("Can't DROP '%-.192s'; check that column/key exists", {})},
    {ErrInsertInfo, Message("Records: %d  Duplicates: %d  Warnings: %d", {})},
    {ErrUpdateTableUsed, Message("You can't specify target table '%-.192s' for update in FROM clause", {})},
    {ErrNoSuchThread, Message("Unknown thread id: %d", {})},
    {ErrKillDenied, Message("You are not owner of thread %d", {})},
    {ErrNoTablesUsed, Message("No tables used", {})},
    {ErrTooBigSet, Message("Too many strings for column %-.192s and SET", {})},
    {ErrNoUniqueLogFile, Message("Can't generate a unique log-filename %-.200s.(1-999)\n", {})},
    {ErrTableNotLockedForWrite, Message("Table '%-.192s' was locked with a READ lock and can't be updated", {})},
    {ErrTableNotLocked, Message("Table '%-.192s' was not locked with LOCK TABLES", {})},
    {ErrBlobCantHaveDefault, Message("BLOB/TEXT/JSON column '%-.192s' can't have a default value", {})},
    {ErrWrongDBName, Message("Incorrect database name '%-.100s'", {})},
    {ErrWrongTableName, Message("Incorrect table name '%-.100s'", {})},
    {ErrTooBigSelect, Message("The SELECT would examine more than MAXJOINSIZE rows; check your WHERE and use SET "
                              "SQLBIGSELECTS=1 or SET MAXJOINSIZE=# if the SELECT is okay",
                              {})},
    {ErrUnknown, Message("Unknown error", {})},
    {ErrUnknownProcedure, Message("Unknown procedure '%-.192s'", {})},
    {ErrWrongParamcountToProcedure, Message("Incorrect parameter count to procedure '%-.192s'", {})},
    {ErrWrongParametersToProcedure, Message("Incorrect parameters to procedure '%-.192s'", {})},
    {ErrUnknownTable, Message("Unknown table '%-.192s' in %-.32s", {})},
    {ErrFieldSpecifiedTwice, Message("Column '%-.192s' specified twice", {})},
    {ErrInvalidGroupFuncUse, Message("Invalid use of group function", {})},
    {ErrUnsupportedExtension,
     Message("Table '%-.192s' uses an extension that doesn't exist in this MySQL version", {})},
    {ErrTableMustHaveColumns, Message("A table must have at least 1 column", {})},
    {ErrRecordFileFull, Message("The table '%-.192s' is full", {})},
    {ErrUnknownCharacterSet, Message("Unknown character set: '%-.64s'", {})},
    {ErrTooManyTables, Message("Too many tables; MySQL can only use %d tables in a join", {})},
    {ErrTooManyFields, Message("Too many columns", {})},
    {ErrTooBigRowsize,
     Message("Row size too large. The maximum row size for the used table type, not counting BLOBs, is %d. This "
             "includes storage overhead, check the manual. You have to change some columns to TEXT or BLOBs",
             {})},
    {ErrStackOverrun, Message("Thread stack overrun:  Used: %d of a %d stack.  Use 'mysqld --threadStack=#' to specify "
                              "a bigger stack if needed",
                              {})},
    {ErrWrongOuterJoin, Message("Cross dependency found in OUTER JOIN; examine your ON conditions", {})},
    {ErrNullColumnInIndex, Message("Table handler doesn't support NULL in given index. Please change column '%-.192s' "
                                   "to be NOT NULL or use another handler",
                                   {})},
    {ErrCantFindUdf, Message("Can't load function '%-.192s'", {})},
    {ErrCantInitializeUdf, Message("Can't initialize function '%-.192s'; %-.80s", {})},
    {ErrUdfNoPaths, Message("No paths allowed for shared library", {})},
    {ErrUdfExists, Message("Function '%-.192s' already exists", {})},
    {ErrCantOpenLibrary, Message("Can't open shared library '%-.192s' (errno: %d %-.128s)", {})},
    {ErrCantFindDlEntry, Message("Can't find symbol '%-.128s' in library", {})},
    {ErrFunctionNotDefined, Message("Function '%-.192s' is not defined", {})},
    {ErrHostIsBlocked,
     Message("Host '%-.64s' is blocked because of many connection errors; unblock with 'mysqladmin flush-hosts'", {})},
    {ErrHostNotPrivileged, Message("Host '%-.64s' is not allowed to connect to this MySQL server", {})},
    {ErrPasswordAnonymousUser,
     Message("You are using MySQL as an anonymous user and anonymous users are not allowed to change passwords", {})},
    {ErrPasswordNotAllowed,
     Message(
         "You must have privileges to update tables in the mysql database to be able to change passwords for others",
         {})},
    {ErrPasswordNoMatch, Message("Can't find any matching row in the user table", {})},
    {ErrUpdateInfo, Message("Rows matched: %d  Changed: %d  Warnings: %d", {})},
    {ErrCantCreateThread, Message("Can't create a new thread (errno %d); if you are not out of available memory, you "
                                  "can consult the manual for a possible OS-dependent bug",
                                  {})},
    {ErrWrongValueCountOnRow, Message("Column count doesn't match value count at row %d", {})},
    {ErrCantReopenTable, Message("Can't reopen table: '%-.192s'", {})},
    {ErrInvalidUseOfNull, Message("Invalid use of NULL value", {})},
    {ErrRegexp, Message("Got error '%-.64s' from regexp", {})},
    {ErrMixOfGroupFuncAndFields, Message("Mixing of GROUP columns (MIN(),MAX(),COUNT(),...) with no GROUP columns is "
                                         "illegal if there is no GROUP BY clause",
                                         {})},
    {ErrNonexistingGrant, Message("There is no such grant defined for user '%-.48s' on host '%-.64s'", {})},
    {ErrTableaccessDenied, Message("%-.128s command denied to user '%-.48s'@'%-.64s' for table '%-.64s'", {})},
    {ErrColumnaccessDenied,
     Message("%-.16s command denied to user '%-.48s'@'%-.64s' for column '%-.192s' in table '%-.192s'", {})},
    {ErrIllegalGrantForTable,
     Message("Illegal GRANT/REVOKE command; please consult the manual to see which privileges can be used", {})},
    {ErrGrantWrongHostOrUser, Message("The host or user argument to GRANT is too long", {})},
    {ErrNoSuchTable, Message("Table '%-.192s.%-.192s' doesn't exist", {})},
    {ErrNonexistingTableGrant,
     Message("There is no such grant defined for user '%-.48s' on host '%-.64s' on table '%-.192s'", {})},
    {ErrNotAllowedCommand, Message("The used command is not allowed with this MySQL version", {})},
    {ErrSyntax, Message("You have an error in your SQL syntax; check the manual that corresponds to your MySQL server "
                        "version for the right syntax to use",
                        {})},
    {ErrDelayedCantChangeLock, Message("Delayed insert thread couldn't get requested lock for table %-.192s", {})},
    {ErrTooManyDelayedThreads, Message("Too many delayed threads in use", {})},
    {ErrAbortingConnection, Message("Aborted connection %d to db: '%-.192s' user: '%-.48s' (%-.64s)", {})},
    {ErrNetPacketTooLarge, Message("Got a packet bigger than 'maxAllowedPacket' bytes", {})},
    {ErrNetReadErrorFromPipe, Message("Got a read error from the connection pipe", {})},
    {ErrNetFcntl, Message("Got an error from fcntl()", {})},
    {ErrNetPacketsOutOfOrder, Message("Got packets out of order", {})},
    {ErrNetUncompress, Message("Couldn't uncompress communication packet", {})},
    {ErrNetRead, Message("Got an error reading communication packets", {})},
    {ErrNetReadInterrupted, Message("Got timeout reading communication packets", {})},
    {ErrNetErrorOnWrite, Message("Got an error writing communication packets", {})},
    {ErrNetWriteInterrupted, Message("Got timeout writing communication packets", {})},
    {ErrTooLongString, Message("Result string is longer than 'maxAllowedPacket' bytes", {})},
    {ErrTableCantHandleBlob, Message("The used table type doesn't support BLOB/TEXT columns", {})},
    {ErrTableCantHandleAutoIncrement, Message("The used table type doesn't support AUTOINCREMENT columns", {})},
    {ErrDelayedInsertTableLocked,
     Message("INSERT DELAYED can't be used with table '%-.192s' because it is locked with LOCK TABLES", {})},
    {ErrWrongColumnName, Message("Incorrect column name '%-.100s'", {})},
    {ErrWrongKeyColumn, Message("The used storage engine can't index column '%-.192s'", {})},
    {ErrWrongMrgTable,
     Message("Unable to open underlying table which is differently defined or of non-MyISAM type or doesn't exist",
             {})},
    {ErrDupUnique, Message("Can't write, because of unique constraint, to table '%-.192s'", {})},
    {ErrBlobKeyWithoutLength, Message("BLOB/TEXT column '%-.192s' used in key specification without a key length", {})},
    {ErrPrimaryCantHaveNull,
     Message("All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead", {})},
    {ErrTooManyRows, Message("Result consisted of more than one row", {})},
    {ErrRequiresPrimaryKey, Message("This table type requires a primary key", {})},
    {ErrNoRaidCompiled, Message("This version of MySQL is not compiled with RAID support", {})},
    {ErrUpdateWithoutKeyInSafeMode,
     Message("You are using safe update mode and you tried to update a table without a WHERE that uses a KEY column",
             {})},
    {ErrKeyDoesNotExist, Message("Key '%-.192s' doesn't exist in table '%-.192s'", {})},
    {ErrCheckNoSuchTable, Message("Can't open table", {})},
    {ErrCheckNotImplemented, Message("The storage engine for the table doesn't support %s", {})},
    {ErrCantDoThisDuringAnTransaction, Message("You are not allowed to execute this command in a transaction", {})},
    {ErrErrorDuringCommit, Message("Got error %d during COMMIT", {})},
    {ErrErrorDuringRollback, Message("Got error %d during ROLLBACK", {})},
    {ErrErrorDuringFlushLogs, Message("Got error %d during FLUSHLOGS", {})},
    {ErrErrorDuringCheckpoint, Message("Got error %d during CHECKPOINT", {})},
    {ErrNewAbortingConnection,
     Message("Aborted connection %d to db: '%-.192s' user: '%-.48s' host: '%-.64s' (%-.64s)", {})},
    {ErrDumpNotImplemented, Message("The storage engine for the table does not support binary table dump", {})},
    {ErrFlushMasterBinlogClosed, Message("Binlog closed, cannot RESET MASTER", {})},
    {ErrIndexRebuild, Message("Failed rebuilding the index of  dumped table '%-.192s'", {})},
    {ErrMaster, Message("Error from master: '%-.64s'", {})},
    {ErrMasterNetRead, Message("Net error reading from master", {})},
    {ErrMasterNetWrite, Message("Net error writing to master", {})},
    {ErrFtMatchingKeyNotFound, Message("Can't find FULLTEXT index matching the column list", {})},
    {ErrLockOrActiveTransaction,
     Message("Can't execute the given command because you have active locked tables or an active transaction", {})},
    {ErrUnknownSystemVariable, Message("Unknown system variable '%-.64s'", {})},
    {ErrCrashedOnUsage, Message("Table '%-.192s' is marked as crashed and should be repaired", {})},
    {ErrCrashedOnRepair, Message("Table '%-.192s' is marked as crashed and last (automatic?) repair failed", {})},
    {ErrWarningNotCompleteRollback, Message("Some non-transactional changed tables couldn't be rolled back", {})},
    {ErrTransCacheFull, Message("Multi-statement transaction required more than 'maxBinlogCacheSize' bytes of storage; "
                                "increase this mysqld variable and try again",
                                {})},
    {ErrSlaveMustStop, Message("This operation cannot be performed with a running slave; run STOP SLAVE first", {})},
    {ErrSlaveNotRunning, Message("This operation requires a running slave; configure slave and do START SLAVE", {})},
    {ErrBadSlave, Message("The server is not configured as slave; fix in config file or with CHANGE MASTER TO", {})},
    {ErrMasterInfo,
     Message("Could not initialize master info structure; more error messages can be found in the MySQL error log",
             {})},
    {ErrSlaveThread, Message("Could not create slave thread; check system resources", {})},
    {ErrTooManyUserConnections,
     Message("User %-.64s already has more than 'maxUserConnections' active connections", {})},
    {ErrSetConstantsOnly, Message("You may only use constant expressions with SET", {})},
    {ErrLockWaitTimeout, Message("Lock wait timeout exceeded; try restarting transaction", {})},
    {ErrLockTableFull, Message("The total number of locks exceeds the lock table size", {})},
    {ErrReadOnlyTransaction, Message("Update locks cannot be acquired during a READ UNCOMMITTED transaction", {})},
    {ErrDropDBWithReadLock, Message("DROP DATABASE not allowed while thread is holding global read lock", {})},
    {ErrCreateDBWithReadLock, Message("CREATE DATABASE not allowed while thread is holding global read lock", {})},
    {ErrWrongArguments, Message("Incorrect arguments to %s", {})},
    {ErrNoPermissionToCreateUser, Message("'%-.48s'@'%-.64s' is not allowed to create new users", {})},
    {ErrUnionTablesInDifferentDir,
     Message("Incorrect table definition; all MERGE tables must be in the same database", {})},
    {ErrLockDeadlock, Message("Deadlock found when trying to get lock; try restarting transaction", {})},
    {ErrTableCantHandleFt, Message("The used table type doesn't support FULLTEXT indexes", {})},
    {ErrCannotAddForeign, Message("Cannot add foreign key constraint", {})},
    {ErrNoReferencedRow, Message("Cannot add or update a child row: a foreign key constraint fails", {})},
    {ErrRowIsReferenced, Message("Cannot delete or update a parent row: a foreign key constraint fails", {})},
    {ErrConnectToMaster, Message("Error connecting to master: %-.128s", {})},
    {ErrQueryOnMaster, Message("Error running query on master: %-.128s", {})},
    {ErrErrorWhenExecutingCommand, Message("Error when executing command %s: %-.128s", {})},
    {ErrWrongUsage, Message("Incorrect usage of %s and %s", {})},
    {ErrWrongNumberOfColumnsInSelect, Message("The used SELECT statements have a different number of columns", {})},
    {ErrCantUpdateWithReadlock, Message("Can't execute the query because you have a conflicting read lock", {})},
    {ErrMixingNotAllowed, Message("Mixing of transactional and non-transactional tables is disabled", {})},
    {ErrDupArgument, Message("Option '%s' used twice in statement", {})},
    {ErrUserLimitReached, Message("User '%-.64s' has exceeded the '%s' resource (current value: %d)", {})},
    {ErrSpecificAccessDenied,
     Message("Access denied; you need (at least one of) the %-.128s privilege(s) for this operation", {})},
    {ErrLocalVariable, Message("Variable '%-.64s' is a SESSION variable and can't be used with SET GLOBAL", {})},
    {ErrGlobalVariable, Message("Variable '%-.64s' is a GLOBAL variable and should be set with SET GLOBAL", {})},
    {ErrNoDefault, Message("Variable '%-.64s' doesn't have a default value", {})},
    {ErrWrongValueForVar, Message("Variable '%-.64s' can't be set to the value of '%-.200s'", {})},
    {ErrWrongTypeForVar, Message("Incorrect argument type to variable '%-.64s'", {})},
    {ErrVarCantBeRead, Message("Variable '%-.64s' can only be set, not read", {})},
    {ErrCantUseOptionHere, Message("Incorrect usage/placement of '%s'", {})},
    {ErrNotSupportedYet, Message("This version of TiDB doesn't yet support '%s'", {})},
    {ErrMasterFatalErrorReadingBinlog,
     Message("Got fatal error %d from master when reading data from binary log: '%-.320s'", {})},
    {ErrSlaveIgnoredTable, Message("Slave SQL thread ignored the query because of replicate-*-table rules", {})},
    {ErrIncorrectGlobalLocalVar, Message("Variable '%-.192s' is a %s variable", {})},
    {ErrWrongFkDef, Message("Incorrect foreign key definition for '%-.192s': %s", {})},
    {ErrKeyRefDoNotMatchTableRef, Message("Key reference and table reference don't match", {})},
    {ErrOperandColumns, Message("Operand should contain %d column(s)", {})},
    {ErrSubqueryNo1Row, Message("Subquery returns more than 1 row", {})},
    {ErrUnknownStmtHandler, Message("Unknown prepared statement handler (%.*s) given to %s", {})},
    {ErrCorruptHelpDB, Message("Help database is corrupt or does not exist", {})},
    {ErrCyclicReference, Message("Cyclic reference on subqueries", {})},
    {ErrAutoConvert, Message("Converting column '%s' from %s to %s", {})},
    {ErrIllegalReference, Message("Reference '%-.64s' not supported (%s)", {})},
    {ErrDerivedMustHaveAlias, Message("Every derived table must have its own alias", {})},
    {ErrSelectReduced, Message("Select %d was reduced during optimization", {})},
    {ErrTablenameNotAllowedHere, Message("Table '%s' from one of the %ss cannot be used in %s", {})},
    {ErrNotSupportedAuthMode,
     Message("Client does not support authentication protocol requested by server; consider upgrading MySQL client",
             {})},
    {ErrSpatialCantHaveNull, Message("All parts of a SPATIAL index must be NOT NULL", {})},
    {ErrCollationCharsetMismatch, Message("COLLATION '%s' is not valid for CHARACTER SET '%s'", {})},
    {ErrSlaveWasRunning, Message("Slave is already running", {})},
    {ErrSlaveWasNotRunning, Message("Slave already has been stopped", {})},
    {ErrTooBigForUncompress, Message("Uncompressed data size too large; the maximum size is %d (probably, length of "
                                     "uncompressed data was corrupted)",
                                     {})},
    {ErrZlibZMem, Message("ZLIB: Not enough memory", {})},
    {ErrZlibZBuf,
     Message("ZLIB: Not enough room in the output buffer (probably, length of uncompressed data was corrupted)", {})},
    {ErrZlibZData, Message("ZLIB: Input data corrupted", {})},
    {ErrCutValueGroupConcat, Message("Some rows were cut by GROUPCONCAT(%s)", {})},
    {ErrWarnTooFewRecords, Message("Row %d doesn't contain data for all columns", {})},
    {ErrWarnTooManyRecords, Message("Row %d was truncated; it contained more data than there were input columns", {})},
    {ErrWarnNullToNotnull, Message("Column set to default value; NULL supplied to NOT NULL column '%s' at row %d", {})},
    {ErrWarnDataOutOfRange, Message("Out of range value for column '%s' at row %d", {})},
    {WarnDataTruncated, Message("Data truncated for column '%s' at row %d", {})},
    {ErrWarnUsingOtherHandler, Message("Using storage engine %s for table '%s'", {})},
    {ErrCantAggregate2collations, Message("Illegal mix of collations (%s,%s) and (%s,%s) for operation '%s'", {})},
    {ErrDropUser, Message("Cannot drop one or more of the requested users", {})},
    {ErrRevokeGrants, Message("Can't revoke all privileges for one or more of the requested users", {})},
    {ErrCantAggregate3collations,
     Message("Illegal mix of collations (%s,%s), (%s,%s), (%s,%s) for operation '%s'", {})},
    {ErrCantAggregateNcollations, Message("Illegal mix of collations for operation '%s'", {})},
    {ErrVariableIsNotStruct,
     Message("Variable '%-.64s' is not a variable component (can't be used as XXXX.variableName)", {})},
    {ErrUnknownCollation, Message("Unknown collation: '%-.64s'", {})},
    {ErrSlaveIgnoredSslParams,
     Message("SSL parameters in CHANGE MASTER are ignored because this MySQL slave was compiled without SSL support; "
             "they can be used later if MySQL slave with SSL is started",
             {})},
    {ErrServerIsInSecureAuthMode, Message("Server is running in --secure-auth mode, but '%s'@'%s' has a password in "
                                          "the old format; please change the password to the new format",
                                          {})},
    {ErrWarnFieldResolved,
     Message("Field or reference '%-.192s%s%-.192s%s%-.192s' of SELECT #%d was resolved in SELECT #%d", {})},
    {ErrBadSlaveUntilCond, Message("Incorrect parameter or combination of parameters for START SLAVE UNTIL", {})},
    {ErrMissingSkipSlave,
     Message("It is recommended to use --skip-slave-start when doing step-by-step replication with START SLAVE UNTIL; "
             "otherwise, you will get problems if you get an unexpected slave's mysqld restart",
             {})},
    {ErrUntilCondIgnored, Message("SQL thread is not to be started so UNTIL options are ignored", {})},
    {ErrWrongNameForIndex, Message("Incorrect index name '%-.100s'", {})},
    {ErrWrongNameForCatalog, Message("Incorrect catalog name '%-.100s'", {})},
    {ErrWarnQcResize, Message("Query cache failed to set size %d; new query cache size is %d", {})},
    {ErrBadFtColumn, Message("Column '%-.192s' cannot be part of FULLTEXT index", {})},
    {ErrUnknownKeyCache, Message("Unknown key cache '%-.100s'", {})},
    {ErrWarnHostnameWontWork,
     Message(
         "MySQL is started in --skip-name-resolve mode; you must restart it without this switch for this grant to work",
         {})},
    {ErrUnknownStorageEngine, Message("Unknown storage engine '%s'", {})},
    {ErrWarnDeprecatedSyntax,
     Message("'%s' is deprecated and will be removed in a future release. Please use %s instead", {})},
    {ErrNonUpdatableTable, Message("The target table %-.100s of the %s is not updatable", {})},
    {ErrFeatureDisabled,
     Message("The '%s' feature is disabled; you need MySQL built with '%s' to have it working", {})},
    {ErrOptionPreventsStatement,
     Message("The MySQL server is running with the %s option so it cannot execute this statement", {})},
    {ErrDuplicatedValueInType, Message("Column '%-.100s' has duplicated value '%-.64s' in %s", {})},
    {ErrTruncatedWrongValue, Message("Truncated incorrect %-.64s value: '%-.128s'", {})},
    {ErrTooMuchAutoTimestampCols, Message("Incorrect table definition; there can be only one TIMESTAMP column with "
                                          "CURRENTTIMESTAMP in DEFAULT or ON UPDATE clause",
                                          {})},
    {ErrInvalidOnUpdate, Message("Invalid ON UPDATE clause for '%-.192s' column", {})},
    {ErrUnsupportedPs, Message("This command is not supported in the prepared statement protocol yet", {})},
    {ErrGetErrmsg, Message("Got error %d '%-.100s' from %s", {})},
    {ErrGetTemporaryErrmsg, Message("Got temporary error %d '%-.100s' from %s", {})},
    {ErrUnknownTimeZone, Message("Unknown or incorrect time zone: '%-.64s'", {})},
    {ErrWarnInvalidTimestamp, Message("Invalid TIMESTAMP value in column '%s' at row %d", {})},
    {ErrInvalidCharacterString, Message("Invalid %s character string: '%.64s'", {})},
    {ErrWarnAllowedPacketOverflowed, Message("Result of %s() was larger than max_allowed_packet (%d) - truncated", {})},
    {ErrConflictingDeclarations, Message("Conflicting declarations: '%s%s' and '%s%s'", {})},
    {ErrSpNoRecursiveCreate, Message("Can't create a %s from within another stored routine", {})},
    {ErrSpAlreadyExists, Message("%s %s already exists", {})},
    {ErrSpDoesNotExist, Message("%s %s does not exist", {})},
    {ErrSpDropFailed, Message("Failed to DROP %s %s", {})},
    {ErrSpStoreFailed, Message("Failed to CREATE %s %s", {})},
    {ErrSpLilabelMismatch, Message("%s with no matching label: %s", {})},
    {ErrSpLabelRedefine, Message("Redefining label %s", {})},
    {ErrSpLabelMismatch, Message("End-label %s without match", {})},
    {ErrSpUninitVar, Message("Referring to uninitialized variable %s", {})},
    {ErrSpBadselect, Message("PROCEDURE %s can't return a result set in the given context", {})},
    {ErrSpBadreturn, Message("RETURN is only allowed in a FUNCTION", {})},
    {ErrSpBadstatement, Message("%s is not allowed in stored procedures", {})},
    {ErrUpdateLogDeprecatedIgnored,
     Message("The update log is deprecated and replaced by the binary log; SET SQLLOGUPDATE has been ignored.", {})},
    {ErrUpdateLogDeprecatedTranslated, Message("The update log is deprecated and replaced by the binary log; SET "
                                               "SQLLOGUPDATE has been translated to SET SQLLOGBIN.",
                                               {})},
    {ErrQueryInterrupted, Message("Query execution was interrupted", {})},
    {ErrSpWrongNoOfArgs, Message("Incorrect number of arguments for %s %s; expected %d, got %d", {})},
    {ErrSpCondMismatch, Message("Undefined CONDITION: %s", {})},
    {ErrSpNoreturn, Message("No RETURN found in FUNCTION %s", {})},
    {ErrSpNoreturnend, Message("FUNCTION %s ended without RETURN", {})},
    {ErrSpBadCursorQuery, Message("Cursor statement must be a SELECT", {})},
    {ErrSpBadCursorSelect, Message("Cursor SELECT must not have INTO", {})},
    {ErrSpCursorMismatch, Message("Undefined CURSOR: %s", {})},
    {ErrSpCursorAlreadyOpen, Message("Cursor is already open", {})},
    {ErrSpCursorNotOpen, Message("Cursor is not open", {})},
    {ErrSpUndeclaredVar, Message("Undeclared variable: %s", {})},
    {ErrSpWrongNoOfFetchArgs, Message("Incorrect number of FETCH variables", {})},
    {ErrSpFetchNoData, Message("No data - zero rows fetched, selected, or processed", {})},
    {ErrSpDupParam, Message("Duplicate parameter: %s", {})},
    {ErrSpDupVar, Message("Duplicate variable: %s", {})},
    {ErrSpDupCond, Message("Duplicate condition: %s", {})},
    {ErrSpDupCurs, Message("Duplicate cursor: %s", {})},
    {ErrSpCantAlter, Message("Failed to ALTER %s %s", {})},
    {ErrSpSubselectNyi, Message("Subquery value not supported", {})},
    {ErrStmtNotAllowedInSfOrTrg, Message("%s is not allowed in stored function or trigger", {})},
    {ErrSpVarcondAfterCurshndlr, Message("Variable or condition declaration after cursor or handler declaration", {})},
    {ErrSpCursorAfterHandler, Message("Cursor declaration after handler declaration", {})},
    {ErrSpCaseNotFound, Message("Case not found for CASE statement", {})},
    {ErrFparserTooBigFile, Message("Configuration file '%-.192s' is too big", {})},
    {ErrFparserBadHeader, Message("Malformed file type header in file '%-.192s'", {})},
    {ErrFparserEOFInComment, Message("Unexpected end of file while parsing comment '%-.200s'", {})},
    {ErrFparserErrorInParameter, Message("Error while parsing parameter '%-.192s' (line: '%-.192s')", {})},
    {ErrFparserEOFInUnknownParameter, Message("Unexpected end of file while skipping unknown parameter '%-.192s'", {})},
    {ErrViewNoExplain, Message("EXPLAIN/SHOW can not be issued; lacking privileges for underlying table", {})},
    {ErrFrmUnknownType, Message("File '%-.192s' has unknown type '%-.64s' in its header", {})},
    {ErrWrongObject, Message("'%-.192s.%-.192s' is not %s", {})},
    {ErrNonupdateableColumn, Message("Column '%-.192s' is not updatable", {})},
    {ErrViewSelectDerived, Message("View's SELECT contains a subquery in the FROM clause", {})},
    {ErrViewSelectClause, Message("View's SELECT contains a '%s' clause", {})},
    {ErrViewSelectVariable, Message("View's SELECT contains a variable or parameter", {})},
    {ErrViewSelectTmptable, Message("View's SELECT refers to a temporary table '%-.192s'", {})},
    {ErrViewWrongList, Message("View's SELECT and view's field list have different column counts", {})},
    {ErrWarnViewMerge, Message("View merge algorithm can't be used here for now (assumed undefined algorithm)", {})},
    {ErrWarnViewWithoutKey, Message("View being updated does not have complete key of underlying table in it", {})},
    {ErrViewInvalid, Message("View '%-.192s.%-.192s' references invalid table(s) or column(s) or function(s) or "
                             "definer/invoker of view lack rights to use them",
                             {})},
    {ErrSpNoDropSp, Message("Can't drop or alter a %s from within another stored routine", {})},
    {ErrSpGotoInHndlr, Message("GOTO is not allowed in a stored procedure handler", {})},
    {ErrTrgAlreadyExists, Message("Trigger already exists", {})},
    {ErrTrgDoesNotExist, Message("Trigger does not exist", {})},
    {ErrTrgOnViewOrTempTable, Message("Trigger's '%-.192s' is view or temporary table", {})},
    {ErrTrgCantChangeRow, Message("Updating of %s row is not allowed in %strigger", {})},
    {ErrTrgNoSuchRowInTrg, Message("There is no %s row in %s trigger", {})},
    {ErrNoDefaultForField, Message("Field '%-.192s' doesn't have a default value", {})},
    {ErrDivisionByZero, Message("Division by 0", {})},
    {ErrTruncatedWrongValueForField, Message("Incorrect %-.32s value: '%-.128s' for column '%.192s' at row %d", {})},
    {ErrIllegalValueForType, Message("Illegal %s '%-.192s' value found during parsing", {})},
    {ErrViewNonupdCheck, Message("CHECK OPTION on non-updatable view '%-.192s.%-.192s'", {})},
    {ErrViewCheckFailed, Message("CHECK OPTION failed '%-.192s.%-.192s'", {})},
    {ErrProcaccessDenied, Message("%-.16s command denied to user '%-.48s'@'%-.64s' for routine '%-.192s'", {})},
    {ErrRelayLogFail, Message("Failed purging old relay logs: %s", {})},
    {ErrPasswdLength, Message("Password hash should be a %d-digit hexadecimal number", {})},
    {ErrUnknownTargetBinlog, Message("Target log not found in binlog index", {})},
    {ErrIoErrLogIndexRead, Message("I/O error reading log index file", {})},
    {ErrBinlogPurgeProhibited, Message("Server configuration does not permit binlog purge", {})},
    {ErrFseekFail, Message("Failed on fseek()", {})},
    {ErrBinlogPurgeFatalErr, Message("Fatal error during log purge", {})},
    {ErrLogInUse, Message("A purgeable log is in use, will not purge", {})},
    {ErrLogPurgeUnknownErr, Message("Unknown error during log purge", {})},
    {ErrRelayLogInit, Message("Failed initializing relay log position: %s", {})},
    {ErrNoBinaryLogging, Message("You are not using binary logging", {})},
    {ErrReservedSyntax, Message("The '%-.64s' syntax is reserved for purposes internal to the MySQL server", {})},
    {ErrWsasFailed, Message("WSAStartup Failed", {})},
    {ErrDiffGroupsProc, Message("Can't handle procedures with different groups yet", {})},
    {ErrNoGroupForProc, Message("Select must have a group with this procedure", {})},
    {ErrOrderWithProc, Message("Can't use ORDER clause with this procedure", {})},
    {ErrLoggingProhibitChangingOf, Message("Binary logging and replication forbid changing the global server %s", {})},
    {ErrNoFileMapping, Message("Can't map file: %-.200s, errno: %d", {})},
    {ErrWrongMagic, Message("Wrong magic in %-.64s", {})},
    {ErrPsManyParam, Message("Prepared statement contains too many placeholders", {})},
    {ErrKeyPart0, Message("Key part '%-.192s' length cannot be 0", {})},
    {ErrViewChecksum, Message("View text checksum failed", {})},
    {ErrViewMultiupdate, Message("Can not modify more than one base table through a join view '%-.192s.%-.192s'", {})},
    {ErrViewNoInsertFieldList, Message("Can not insert into join view '%-.192s.%-.192s' without fields list", {})},
    {ErrViewDeleteMergeView, Message("Can not delete from join view '%-.192s.%-.192s'", {})},
    {ErrCannotUser, Message("Operation %s failed for %.256s", {})},
    {ErrXaerNota, Message("XAERNOTA: Unknown XID", {})},
    {ErrXaerInval, Message("XAERINVAL: Invalid arguments (or unsupported command)", {})},
    {ErrXaerRmfail,
     Message("XAERRMFAIL: The command cannot be executed when global transaction is in the  %.64s state", {})},
    {ErrXaerOutside, Message("XAEROUTSIDE: Some work is done outside global transaction", {})},
    {ErrXaerRmerr,
     Message("XAERRMERR: Fatal error occurred in the transaction branch - check your data for consistency", {})},
    {ErrXaRbrollback, Message("XARBROLLBACK: Transaction branch was rolled back", {})},
    {ErrNonexistingProcGrant,
     Message("There is no such grant defined for user '%-.48s' on host '%-.64s' on routine '%-.192s'", {})},
    {ErrProcAutoGrantFail, Message("Failed to grant EXECUTE and ALTER ROUTINE privileges", {})},
    {ErrProcAutoRevokeFail, Message("Failed to revoke all privileges to dropped routine", {})},
    {ErrDataTooLong, Message("Data too long for column '%s' at row %d", {})},
    {ErrSpBadSQLstate, Message("Bad SQLSTATE: '%s'", {})},
    {ErrStartup, Message("%s: ready for connections.\nVersion: '%s'  socket: '%s'  port: %d  %s", {})},
    {ErrLoadFromFixedSizeRowsToVar, Message("Can't load value from file with fixed size rows to variable", {})},
    {ErrCantCreateUserWithGrant, Message("You are not allowed to create a user with GRANT", {})},
    {ErrWrongValueForType, Message("Incorrect %-.32s value: '%-.128s' for function %-.32s", {})},
    {ErrTableDefChanged, Message("Table definition has changed, please retry transaction", {})},
    {ErrSpDupHandler, Message("Duplicate handler declared in the same block", {})},
    {ErrSpNotVarArg,
     Message("OUT or INOUT argument %d for routine %s is not a variable or NEW pseudo-variable in BEFORE trigger", {})},
    {ErrSpNoRetset, Message("Not allowed to return a result set from a %s", {})},
    {ErrCantCreateGeometryObject, Message("Cannot get geometry object from data you send to the GEOMETRY field", {})},
    {ErrFailedRoutineBreakBinlog,
     Message("A routine failed and has neither NO SQL nor READS SQL DATA in its declaration and binary logging is "
             "enabled; if non-transactional tables were updated, the binary log will miss their changes",
             {})},
    {ErrBinlogUnsafeRoutine,
     Message("This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging "
             "is enabled (you *might* want to use the less safe logBinTrustFunctionCreators variable)",
             {})},
    {ErrBinlogCreateRoutineNeedSuper, Message("You do not have the SUPER privilege and binary logging is enabled (you "
                                              "*might* want to use the less safe logBinTrustFunctionCreators variable)",
                                              {})},
    {ErrExecStmtWithOpenCursor, Message("You can't execute a prepared statement which has an open cursor associated "
                                        "with it. Reset the statement to re-execute it.",
                                        {})},
    {ErrStmtHasNoOpenCursor, Message("The statement (%d) has no open cursor.", {})},
    {ErrCommitNotAllowedInSfOrTrg,
     Message("Explicit or implicit commit is not allowed in stored function or trigger.", {})},
    {ErrNoDefaultForViewField,
     Message("Field of view '%-.192s.%-.192s' underlying table doesn't have a default value", {})},
    {ErrSpNoRecursion, Message("Recursive stored functions and triggers are not allowed.", {})},
    {ErrTooBigScale, Message("Too big scale %d specified for column '%-.192s'. Maximum is %d.", {})},
    {ErrTooBigPrecision, Message("Too big precision %d specified for column '%-.192s'. Maximum is %d.", {})},
    {ErrMBiggerThanD, Message("For float(M,D), double(M,D) or decimal(M,D), M must be >= D (column '%-.192s').", {})},
    {ErrWrongLockOfSystemTable,
     Message("You can't combine write-locking of system tables with other tables or lock types", {})},
    {ErrConnectToForeignDataSource, Message("Unable to connect to foreign data source: %.64s", {})},
    {ErrQueryOnForeignDataSource,
     Message("There was a problem processing the query on the foreign data source. Data source : %-.64s", {})},
    {ErrForeignDataSourceDoesntExist,
     Message("The foreign data source you are trying to reference does not exist. Data source :  %-.64s", {})},
    {ErrForeignDataStringInvalidCantCreate,
     Message("Can't create federated table. The data source connection string '%-.64s' is not in the correct format",
             {})},
    {ErrForeignDataStringInvalid,
     Message("The data source connection string '%-.64s' is not in the correct format", {})},
    {ErrCantCreateFederatedTable, Message("Can't create federated table. Foreign data src :  %-.64s", {})},
    {ErrTrgInWrongSchema, Message("Trigger in wrong schema", {})},
    {ErrStackOverrunNeedMore, Message("Thread stack overrun:  %d bytes used of a %d byte stack, and %d bytes needed.  "
                                      "Use 'mysqld --threadStack=#' to specify a bigger stack.",
                                      {})},
    {ErrTooLongBody, Message("Routine body for '%-.100s' is too long", {})},
    {ErrWarnCantDropDefaultKeycache, Message("Cannot drop default keycache", {})},
    {ErrTooBigDisplaywidth, Message("Display width out of range for column '%-.192s' (max = %d)", {})},
    {ErrXaerDupid, Message("XAERDUPID: The XID already exists", {})},
    {ErrDatetimeFunctionOverflow, Message("Datetime function: %-.32s field overflow", {})},
    {ErrCantUpdateUsedTableInSfOrTrg, Message("Can't update table '%-.192s' in stored function/trigger because it is "
                                              "already used by statement which invoked this stored function/trigger.",
                                              {})},
    {ErrViewPreventUpdate,
     Message("The definition of table '%-.192s' prevents operation %.192s on table '%-.192s'.", {})},
    {ErrPsNoRecursion, Message("The prepared statement contains a stored routine call that refers to that same "
                               "statement. It's not allowed to execute a prepared statement in such a recursive manner",
                               {})},
    {ErrSpCantSetAutocommit, Message("Not allowed to set autocommit from a stored function or trigger", {})},
    {ErrMalformedDefiner, Message("Definer is not fully qualified", {})},
    {ErrViewFrmNoUser, Message("View '%-.192s'.'%-.192s' has no definer information (old table format). Current user "
                               "is used as definer. Please recreate the view!",
                               {})},
    {ErrViewOtherUser, Message("You need the SUPER privilege for creation view with '%-.192s'@'%-.192s' definer", {})},
    {ErrNoSuchUser, Message("The user specified as a definer ('%-.64s'@'%-.64s') does not exist", {})},
    {ErrForbidSchemaChange, Message("Changing schema from '%-.192s' to '%-.192s' is not allowed.", {})},
    {ErrRowIsReferenced2, Message("Cannot delete or update a parent row: a foreign key constraint fails (%.192s)", {})},
    {ErrNoReferencedRow2, Message("Cannot add or update a child row: a foreign key constraint fails (%.192s)", {})},
    {ErrSpBadVarShadow, Message("Variable '%-.64s' must be quoted with `...`, or renamed", {})},
    {ErrTrgNoDefiner,
     Message("No definer attribute for trigger '%-.192s'.'%-.192s'. The trigger will be activated under the "
             "authorization of the invoker, which may have insufficient privileges. Please recreate the trigger.",
             {})},
    {ErrOldFileFormat, Message("'%-.192s' has an old format, you should re-create the '%s' object(s)", {})},
    {ErrSpRecursionLimit,
     Message("Recursive limit %d (as set by the maxSpRecursionDepth variable) was exceeded for routine %.192s", {})},
    {ErrSpProcTableCorrupt, Message("Failed to load routine %-.192s. The table mysql.proc is missing, corrupt, or "
                                    "contains bad data (internal code %d)",
                                    {})},
    {ErrSpWrongName, Message("Incorrect routine name '%-.192s'", {})},
    {ErrTableNeedsUpgrade, Message("Table upgrade required. Please do \"REPAIR TABLE `%-.32s`\"", {})},
    {ErrSpNoAggregate, Message("AGGREGATE is not supported for stored functions", {})},
    {ErrMaxPreparedStmtCountReached,
     Message("Can't create more than maxPreparedStmtCount statements (current value: %d)", {})},
    {ErrViewRecursive, Message("`%-.192s`.`%-.192s` contains view recursion", {})},
    {ErrNonGroupingFieldUsed, Message("Non-grouping field '%-.192s' is used in %-.64s clause", {})},
    {ErrTableCantHandleSpkeys, Message("The used table type doesn't support SPATIAL indexes", {})},
    {ErrNoTriggersOnSystemSchema, Message("Triggers can not be created on system tables", {})},
    {ErrRemovedSpaces, Message("Leading spaces are removed from name '%s'", {})},
    {ErrAutoincReadFailed, Message("Failed to read auto-increment value from storage engine", {})},
    {ErrUsername, Message("user name", {})},
    {ErrHostname, Message("host name", {})},
    {ErrWrongStringLength, Message("String '%-.70s' is too long for %s (should be no longer than %d)", {})},
    {ErrNonInsertableTable, Message("The target table %-.100s of the %s is not insertable-into", {})},
    {ErrAdminWrongMrgTable,
     Message("Table '%-.64s' is differently defined or of non-MyISAM type or doesn't exist", {})},
    {ErrTooHighLevelOfNestingForSelect, Message("Too high level of nesting for select", {})},
    {ErrNameBecomesEmpty, Message("Name '%-.64s' has become ''", {})},
    {ErrAmbiguousFieldTerm, Message("First character of the FIELDS TERMINATED string is ambiguous; please use "
                                    "non-optional and non-empty FIELDS ENCLOSED BY",
                                    {})},
    {ErrForeignServerExists, Message("The foreign server, %s, you are trying to create already exists.", {})},
    {ErrForeignServerDoesntExist,
     Message("The foreign server name you are trying to reference does not exist. Data source :  %-.64s", {})},
    {ErrIllegalHaCreateOption, Message("Table storage engine '%-.64s' does not support the create option '%.64s'", {})},
    {ErrPartitionRequiresValues,
     Message("Syntax : %-.64s PARTITIONING requires definition of VALUES %-.64s for each partition", {})},
    {ErrPartitionWrongValues, Message("Only %-.64s PARTITIONING can use VALUES %-.64s in partition definition", {})},
    {ErrPartitionMaxvalue, Message("MAXVALUE can only be used in last partition definition", {})},
    {ErrPartitionSubpartition, Message("Subpartitions can only be hash partitions and by key", {})},
    {ErrPartitionSubpartMix, Message("Must define subpartitions on all partitions if on one partition", {})},
    {ErrPartitionWrongNoPart, Message("Wrong number of partitions defined, mismatch with previous setting", {})},
    {ErrPartitionWrongNoSubpart, Message("Wrong number of subpartitions defined, mismatch with previous setting", {})},
    {ErrWrongExprInPartitionFunc,
     Message("Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed", {})},
    {ErrNoConstExprInRangeOrList, Message("Expression in RANGE/LIST VALUES must be constant", {})},
    {ErrFieldNotFoundPart, Message("Field in list of fields for partition function not found in table", {})},
    {ErrListOfFieldsOnlyInHash, Message("List of fields is only allowed in KEY partitions", {})},
    {ErrInconsistentPartitionInfo,
     Message("The partition info in the frm file is not consistent with what can be written into the frm file", {})},
    {ErrPartitionFuncNotAllowed, Message("The %-.192s function returns the wrong type", {})},
    {ErrPartitionsMustBeDefined, Message("For %-.64s partitions each partition must be defined", {})},
    {ErrRangeNotIncreasing, Message("VALUES LESS THAN value must be strictly increasing for each partition", {})},
    {ErrInconsistentTypeOfFunctions, Message("VALUES value must be of same type as partition function", {})},
    {ErrMultipleDefConstInListPart, Message("Multiple definition of same constant in list partitioning", {})},
    {ErrPartitionEntry, Message("Partitioning can not be used stand-alone in query", {})},
    {ErrMixHandler, Message("The mix of handlers in the partitions is not allowed in this version of MySQL", {})},
    {ErrPartitionNotDefined, Message("For the partitioned engine it is necessary to define all %-.64s", {})},
    {ErrTooManyPartitions, Message("Too many partitions (including subpartitions) were defined", {})},
    {ErrSubpartition,
     Message("It is only possible to mix RANGE/LIST partitioning with HASH/KEY partitioning for subpartitioning", {})},
    {ErrCantCreateHandlerFile, Message("Failed to create specific handler file", {})},
    {ErrBlobFieldInPartFunc, Message("A BLOB field is not allowed in partition function", {})},
    {ErrUniqueKeyNeedAllFieldsInPf,
     Message("A %-.192s must include all columns in the table's partitioning function", {})},
    {ErrNoParts, Message("Number of %-.64s = 0 is not an allowed value", {})},
    {ErrPartitionMgmtOnNonpartitioned, Message("Partition management on a not partitioned table is not possible", {})},
    {ErrForeignKeyOnPartitioned,
     Message("Foreign key clause is not yet supported in conjunction with partitioning", {})},
    {ErrDropPartitionNonExistent, Message("Error in list of partitions to %-.64s", {})},
    {ErrDropLastPartition, Message("Cannot remove all partitions, use DROP TABLE instead", {})},
    {ErrCoalesceOnlyOnHashPartition, Message("COALESCE PARTITION can only be used on HASH/KEY partitions", {})},
    {ErrReorgHashOnlyOnSameNo,
     Message("REORGANIZE PARTITION can only be used to reorganize partitions not to change their numbers", {})},
    {ErrReorgNoParam,
     Message(
         "REORGANIZE PARTITION without parameters can only be used on auto-partitioned tables using HASH PARTITIONs",
         {})},
    {ErrOnlyOnRangeListPartition, Message("%-.64s PARTITION can only be used on RANGE/LIST partitions", {})},
    {ErrAddPartitionSubpart, Message("Trying to Add partition(s) with wrong number of subpartitions", {})},
    {ErrAddPartitionNoNewPartition, Message("At least one partition must be added", {})},
    {ErrCoalescePartitionNoPartition, Message("At least one partition must be coalesced", {})},
    {ErrReorgPartitionNotExist, Message("More partitions to reorganize than there are partitions", {})},
    {ErrSameNamePartition, Message("Duplicate partition name %-.192s", {})},
    {ErrNoBinlog, Message("It is not allowed to shut off binlog on this command", {})},
    {ErrConsecutiveReorgPartitions,
     Message("When reorganizing a set of partitions they must be in consecutive order", {})},
    {ErrReorgOutsideRange, Message("Reorganize of range partitions cannot change total ranges except for last "
                                   "partition where it can extend the range",
                                   {})},
    {ErrPartitionFunctionFailure, Message("Partition function not supported in this version for this handler", {})},
    {ErrPartState, Message("Partition state cannot be defined from CREATE/ALTER TABLE", {})},
    {ErrLimitedPartRange, Message("The %-.64s handler only supports 32 bit integers in VALUES", {})},
    {ErrPluginIsNotLoaded, Message("Plugin '%-.192s' is not loaded", {})},
    {ErrWrongValue, Message("Incorrect %-.32s value: '%-.128s'", {})},
    {ErrNoPartitionForGivenValue, Message("Table has no partition for value %-.64s", {})},
    {ErrFilegroupOptionOnlyOnce, Message("It is not allowed to specify %s more than once", {})},
    {ErrCreateFilegroupFailed, Message("Failed to create %s", {})},
    {ErrDropFilegroupFailed, Message("Failed to drop %s", {})},
    {ErrTablespaceAutoExtend, Message("The handler doesn't support autoextend of tablespaces", {})},
    {ErrWrongSizeNumber, Message("A size parameter was incorrectly specified, either number or on the form 10M", {})},
    {ErrSizeOverflow,
     Message("The size number was correct but we don't allow the digit part to be more than 2 billion", {})},
    {ErrAlterFilegroupFailed, Message("Failed to alter: %s", {})},
    {ErrBinlogRowLoggingFailed, Message("Writing one row to the row-based binary log failed", {})},
    {ErrBinlogRowWrongTableDef, Message("Table definition on master and slave does not match: %s", {})},
    {ErrBinlogRowRbrToSbr, Message("Slave running with --log-slave-updates must use row-based binary logging to be "
                                   "able to replicate row-based binary log events",
                                   {})},
    {ErrEventAlreadyExists, Message("Event '%-.192s' already exists", {})},
    {ErrEventStoreFailed, Message("Failed to store event %s. Error code %d from storage engine.", {})},
    {ErrEventDoesNotExist, Message("Unknown event '%-.192s'", {})},
    {ErrEventCantAlter, Message("Failed to alter event '%-.192s'", {})},
    {ErrEventDropFailed, Message("Failed to drop %s", {})},
    {ErrEventIntervalNotPositiveOrTooBig, Message("INTERVAL is either not positive or too big", {})},
    {ErrEventEndsBeforeStarts, Message("ENDS is either invalid or before STARTS", {})},
    {ErrEventExecTimeInThePast, Message("Event execution time is in the past. Event has been disabled", {})},
    {ErrEventOpenTableFailed, Message("Failed to open mysql.event", {})},
    {ErrEventNeitherMExprNorMAt, Message("No datetime expression provided", {})},
    {ErrObsoleteColCountDoesntMatchCorrupted,
     Message("Column count of mysql.%s is wrong. Expected %d, found %d. The table is probably corrupted", {})},
    {ErrObsoleteCannotLoadFromTable, Message("Cannot load from mysql.%s. The table is probably corrupted", {})},
    {ErrEventCannotDelete, Message("Failed to delete the event from mysql.event", {})},
    {ErrEventCompile, Message("Error during compilation of event's body", {})},
    {ErrEventSameName, Message("Same old and new event name", {})},
    {ErrEventDataTooLong, Message("Data for column '%s' too long", {})},
    {ErrDropIndexFk, Message("Cannot drop index '%-.192s': needed in a foreign key constraint", {})},
    {ErrWarnDeprecatedSyntaxWithVer,
     Message("The syntax '%s' is deprecated and will be removed in MySQL %s. Please use %s instead", {})},
    {ErrCantWriteLockLogTable, Message("You can't write-lock a log table. Only read access is possible", {})},
    {ErrCantLockLogTable, Message("You can't use locks with log tables.", {})},
    {ErrForeignDuplicateKeyOldUnused, Message("Upholding foreign key constraints for table '%.192s', entry '%-.192s', "
                                              "key %d would lead to a duplicate entry",
                                              {})},
    {ErrColCountDoesntMatchPleaseUpdate,
     Message("Column count of mysql.%s is wrong. Expected %d, found %d. Created with MySQL %d, now running %d. Please "
             "use mysqlUpgrade to fix this error.",
             {})},
    {ErrTempTablePreventsSwitchOutOfRbr,
     Message("Cannot switch out of the row-based binary log format when the session has open temporary tables", {})},
    {ErrStoredFunctionPreventsSwitchBinlogFormat,
     Message("Cannot change the binary logging format inside a stored function or trigger", {})},
    {ErrNdbCantSwitchBinlogFormat,
     Message("The NDB cluster engine does not support changing the binlog format on the fly yet", {})},
    {ErrPartitionNoTemporary, Message("Cannot create temporary table with partitions", {})},
    {ErrPartitionConstDomain, Message("Partition constant is out of partition function domain", {})},
    {ErrPartitionFunctionIsNotAllowed, Message("This partition function is not allowed", {})},
    {ErrDdlLog, Message("Error in DDL log", {})},
    {ErrNullInValuesLessThan, Message("Not allowed to use NULL value in VALUES LESS THAN", {})},
    {ErrWrongPartitionName, Message("Incorrect partition name", {})},
    {ErrCantChangeTxCharacteristics,
     Message("Transaction characteristics can't be changed while a transaction is in progress", {})},
    {ErrDupEntryAutoincrementCase,
     Message("ALTER TABLE causes autoIncrement resequencing, resulting in duplicate entry '%-.192s' for key '%-.192s'",
             {})},
    {ErrEventModifyQueue, Message("Internal scheduler error %d", {})},
    {ErrEventSetVar, Message("Error during starting/stopping of the scheduler. Error code %d", {})},
    {ErrPartitionMerge, Message("Engine cannot be used in partitioned tables", {})},
    {ErrCantActivateLog, Message("Cannot activate '%-.64s' log", {})},
    {ErrRbrNotAvailable, Message("The server was not built with row-based replication", {})},
    {ErrBase64Decode, Message("Decoding of base64 string failed", {})},
    {ErrEventRecursionForbidden, Message("Recursion of EVENT DDL statements is forbidden when body is present", {})},
    {ErrEventsDB,
     Message("Cannot proceed because system tables used by Event Scheduler were found damaged at server start", {})},
    {ErrOnlyIntegersAllowed, Message("Only integers allowed as number here", {})},
    {ErrUnsuportedLogEngine, Message("This storage engine cannot be used for log tables\"", {})},
    {ErrBadLogStatement, Message("You cannot '%s' a log table if logging is enabled", {})},
    {ErrCantRenameLogTable, Message("Cannot rename '%s'. When logging enabled, rename to/from log table must rename "
                                    "two tables: the log table to an archive table and another table back to '%s'",
                                    {})},
    {ErrWrongParamcountToNativeFct, Message("Incorrect parameter count in the call to native function '%-.192s'", {})},
    {ErrWrongParametersToNativeFct, Message("Incorrect parameters in the call to native function '%-.192s'", {})},
    {ErrWrongParametersToStoredFct, Message("Incorrect parameters in the call to stored function '%-.192s'", {})},
    {ErrNativeFctNameCollision, Message("This function '%-.192s' has the same name as a native function", {})},
    {ErrDupEntryWithKeyName, Message("Duplicate entry '%-.64s' for key '%-.192s'", {})},
    {ErrBinlogPurgeEmFile, Message("Too many files opened, please execute the command again", {})},
    {ErrEventCannotCreateInThePast, Message("Event execution time is in the past and ON COMPLETION NOT PRESERVE is "
                                            "set. The event was dropped immediately after creation.",
                                            {})},
    {ErrEventCannotAlterInThePast, Message("Event execution time is in the past and ON COMPLETION NOT PRESERVE is set. "
                                           "The event was not changed. Specify a time in the future.",
                                           {})},
    {ErrSlaveIncident, Message("The incident %s occurred on the master. Message: %-.64s", {})},
    {ErrNoPartitionForGivenValueSilent, Message("Table has no partition for some existing values", {})},
    {ErrBinlogUnsafeStatement,
     Message("Unsafe statement written to the binary log using statement format since BINLOGFORMAT = STATEMENT. %s",
             {})},
    {ErrSlaveFatal, Message("Fatal : %s", {})},
    {ErrSlaveRelayLogReadFailure, Message("Relay log read failure: %s", {})},
    {ErrSlaveRelayLogWriteFailure, Message("Relay log write failure: %s", {})},
    {ErrSlaveCreateEventFailure, Message("Failed to create %s", {})},
    {ErrSlaveMasterComFailure, Message("Master command %s failed: %s", {})},
    {ErrBinlogLoggingImpossible, Message("Binary logging not possible. Message: %s", {})},
    {ErrViewNoCreationCtx, Message("View `%-.64s`.`%-.64s` has no creation context", {})},
    {ErrViewInvalidCreationCtx, Message("Creation context of view `%-.64s`.`%-.64s' is invalid", {})},
    {ErrSrInvalidCreationCtx, Message("Creation context of stored routine `%-.64s`.`%-.64s` is invalid", {})},
    {ErrTrgCorruptedFile, Message("Corrupted TRG file for table `%-.64s`.`%-.64s`", {})},
    {ErrTrgNoCreationCtx, Message("Triggers for table `%-.64s`.`%-.64s` have no creation context", {})},
    {ErrTrgInvalidCreationCtx, Message("Trigger creation context of table `%-.64s`.`%-.64s` is invalid", {})},
    {ErrEventInvalidCreationCtx, Message("Creation context of event `%-.64s`.`%-.64s` is invalid", {})},
    {ErrTrgCantOpenTable, Message("Cannot open table for trigger `%-.64s`.`%-.64s`", {})},
    {ErrCantCreateSroutine, Message("Cannot create stored routine `%-.64s`. Check warnings", {})},
    {ErrNeverUsed, Message("Ambiguous slave modes combination. %s", {})},
    {ErrNoFormatDescriptionEventBeforeBinlogStatement,
     Message("The BINLOG statement of type `%s` was not preceded by a format description BINLOG statement.", {})},
    {ErrSlaveCorruptEvent, Message("Corrupted replication event was detected", {})},
    {ErrLoadDataInvalidColumn, Message("Invalid column reference (%-.64s) in LOAD DATA", {})},
    {ErrLogPurgeNoFile, Message("Being purged log %s was not found", {})},
    {ErrXaRbtimeout, Message("XARBTIMEOUT: Transaction branch was rolled back: took too long", {})},
    {ErrXaRbdeadlock, Message("XARBDEADLOCK: Transaction branch was rolled back: deadlock was detected", {})},
    {ErrNeedReprepare, Message("Prepared statement needs to be re-prepared", {})},
    {ErrDelayedNotSupported, Message("DELAYED option not supported for table '%-.192s'", {})},
    {WarnNoMasterInfo, Message("The master info structure does not exist", {})},
    {WarnOptionIgnored, Message("<%-.64s> option ignored", {})},
    {WarnPluginDeleteBuiltin, Message("Built-in plugins cannot be deleted", {})},
    {WarnPluginBusy, Message("Plugin is busy and will be uninstalled on shutdown", {})},
    {ErrVariableIsReadonly, Message("%s variable '%s' is read-only. Use SET %s to assign the value", {})},
    {ErrWarnEngineTransactionRollback, Message("Storage engine %s does not support rollback for this statement. "
                                               "Transaction rolled back and must be restarted",
                                               {})},
    {ErrSlaveHeartbeatFailure, Message("Unexpected master's heartbeat data: %s", {})},
    {ErrSlaveHeartbeatValueOutOfRange,
     Message(
         "The requested value for the heartbeat period is either negative or exceeds the maximum allowed (%s seconds).",
         {})},
    {ErrNdbReplicationSchema, Message("Bad schema for mysql.ndbReplication table. Message: %-.64s", {})},
    {ErrConflictFnParse, Message("Error in parsing conflict function. Message: %-.64s", {})},
    {ErrExceptionsWrite, Message("Write to exceptions table failed. Message: %-.128s\"", {})},
    {ErrTooLongTableComment, Message("Comment for table '%-.64s' is too long (max = %d)", {})},
    {ErrTooLongFieldComment, Message("Comment for field '%-.64s' is too long (max = %d)", {})},
    {ErrFuncInexistentNameCollision,
     Message(
         "FUNCTION %s does not exist. Check the 'Function Name Parsing and Resolution' section in the Reference Manual",
         {})},
    {ErrDatabaseName, Message("Database", {})},
    {ErrTableName, Message("Table", {})},
    {ErrPartitionName, Message("Partition", {})},
    {ErrSubpartitionName, Message("Subpartition", {})},
    {ErrTemporaryName, Message("Temporary", {})},
    {ErrRenamedName, Message("Renamed", {})},
    {ErrTooManyConcurrentTrxs, Message("Too many active concurrent transactions", {})},
    {WarnNonASCIISeparatorNotImplemented, Message("Non-ASCII separator arguments are not fully supported", {})},
    {ErrDebugSyncTimeout, Message("debug sync point wait timed out", {})},
    {ErrDebugSyncHitLimit, Message("debug sync point hit limit reached", {})},
    {ErrDupSignalSet, Message("Duplicate condition information item '%s'", {})},
    {ErrSignalWarn, Message("Unhandled user-defined warning condition", {})},
    {ErrSignalNotFound, Message("Unhandled user-defined not found condition", {})},
    {ErrSignalException, Message("Unhandled user-defined exception condition", {})},
    {ErrResignalWithoutActiveHandler, Message("RESIGNAL when handler not active", {})},
    {ErrSignalBadConditionType, Message("SIGNAL/RESIGNAL can only use a CONDITION defined with SQLSTATE", {})},
    {WarnCondItemTruncated, Message("Data truncated for condition item '%s'", {})},
    {ErrCondItemTooLong, Message("Data too long for condition item '%s'", {})},
    {ErrUnknownLocale, Message("Unknown locale: '%-.64s'", {})},
    {ErrSlaveIgnoreServerIds,
     Message("The requested server id %d clashes with the slave startup option --replicate-same-server-id", {})},
    {ErrQueryCacheDisabled,
     Message("Query cache is disabled; restart the server with queryCacheType=1 to enable it", {})},
    {ErrSameNamePartitionField, Message("Duplicate partition field name '%-.192s'", {})},
    {ErrPartitionColumnList, Message("Inconsistency in usage of column lists for partitioning", {})},
    {ErrWrongTypeColumnValue, Message("Partition column values of incorrect type", {})},
    {ErrTooManyPartitionFuncFields, Message("Too many fields in '%-.192s'", {})},
    {ErrMaxvalueInValuesIn, Message("Cannot use MAXVALUE as value in VALUES IN", {})},
    {ErrTooManyValues, Message("Cannot have more than one value for this type of %-.64s partitioning", {})},
    {ErrRowSinglePartitionField,
     Message("Row expressions in VALUES IN only allowed for multi-field column partitioning", {})},
    {ErrFieldTypeNotAllowedAsPartitionField,
     Message("Field '%-.192s' is of a not allowed type for this type of partitioning", {})},
    {ErrPartitionFieldsTooLong, Message("The total length of the partitioning fields is too large", {})},
    {ErrBinlogRowEngineAndStmtEngine, Message("Cannot execute statement: impossible to write to binary log since both "
                                              "row-incapable engines and statement-incapable engines are involved.",
                                              {})},
    {ErrBinlogRowModeAndStmtEngine,
     Message("Cannot execute statement: impossible to write to binary log since BINLOGFORMAT = ROW and at least one "
             "table uses a storage engine limited to statement-based logging.",
             {})},
    {ErrBinlogUnsafeAndStmtEngine,
     Message("Cannot execute statement: impossible to write to binary log since statement is unsafe, storage engine is "
             "limited to statement-based logging, and BINLOGFORMAT = MIXED. %s",
             {})},
    {ErrBinlogRowInjectionAndStmtEngine,
     Message("Cannot execute statement: impossible to write to binary log since statement is in row format and at "
             "least one table uses a storage engine limited to statement-based logging.",
             {})},
    {ErrBinlogStmtModeAndRowEngine,
     Message("Cannot execute statement: impossible to write to binary log since BINLOGFORMAT = STATEMENT and at least "
             "one table uses a storage engine limited to row-based logging.%s",
             {})},
    {ErrBinlogRowInjectionAndStmtMode, Message("Cannot execute statement: impossible to write to binary log since "
                                               "statement is in row format and BINLOGFORMAT = STATEMENT.",
                                               {})},
    {ErrBinlogMultipleEnginesAndSelfLoggingEngine,
     Message("Cannot execute statement: impossible to write to binary log since more than one engine is involved and "
             "at least one engine is self-logging.",
             {})},
    {ErrBinlogUnsafeLimit, Message("The statement is unsafe because it uses a LIMIT clause. This is unsafe because the "
                                   "set of rows included cannot be predicted.",
                                   {})},
    {ErrBinlogUnsafeInsertDelayed, Message("The statement is unsafe because it uses INSERT DELAYED. This is unsafe "
                                           "because the times when rows are inserted cannot be predicted.",
                                           {})},
    {ErrBinlogUnsafeSystemTable,
     Message("The statement is unsafe because it uses the general log, slow query log, or performanceSchema table(s). "
             "This is unsafe because system tables may differ on slaves.",
             {})},
    {ErrBinlogUnsafeAutoincColumns,
     Message("Statement is unsafe because it invokes a trigger or a stored function that inserts into an AUTOINCREMENT "
             "column. Inserted values cannot be logged correctly.",
             {})},
    {ErrBinlogUnsafeUdf,
     Message("Statement is unsafe because it uses a UDF which may not return the same value on the slave.", {})},
    {ErrBinlogUnsafeSystemVariable,
     Message("Statement is unsafe because it uses a system variable that may have a different value on the slave.",
             {})},
    {ErrBinlogUnsafeSystemFunction,
     Message("Statement is unsafe because it uses a system function that may return a different value on the slave.",
             {})},
    {ErrBinlogUnsafeNontransAfterTrans, Message("Statement is unsafe because it accesses a non-transactional table "
                                                "after accessing a transactional table within the same transaction.",
                                                {})},
    {ErrMessageAndStatement, Message("%s Statement: %s", {})},
    {ErrSlaveConversionFailed,
     Message("Column %d of table '%-.192s.%-.192s' cannot be converted from type '%-.32s' to type '%-.32s'", {})},
    {ErrSlaveCantCreateConversion, Message("Can't create conversion table for table '%-.192s.%-.192s'", {})},
    {ErrInsideTransactionPreventsSwitchBinlogFormat,
     Message("Cannot modify @@session.binlogFormat inside a transaction", {})},
    {ErrPathLength, Message("The path specified for %.64s is too long.", {})},
    {ErrWarnDeprecatedSyntaxNoReplacement, Message("'%s' is deprecated and will be removed in a future release.", {})},
    {ErrWrongNativeTableStructure, Message("Native table '%-.64s'.'%-.64s' has the wrong structure", {})},
    {ErrWrongPerfSchemaUsage, Message("Invalid performanceSchema usage.", {})},
    {ErrWarnISSkippedTable,
     Message("Table '%s'.'%s' was skipped since its definition is being modified by concurrent DDL statement", {})},
    {ErrInsideTransactionPreventsSwitchBinlogDirect,
     Message("Cannot modify @@session.binlogDirectNonTransactionalUpdates inside a transaction", {})},
    {ErrStoredFunctionPreventsSwitchBinlogDirect,
     Message("Cannot change the binlog direct flag inside a stored function or trigger", {})},
    {ErrSpatialMustHaveGeomCol, Message("A SPATIAL index may only contain a geometrical type column", {})},
    {ErrTooLongIndexComment, Message("Comment for index '%-.64s' is too long (max = %d)", {})},
    {ErrLockAborted, Message("Wait on a lock was aborted due to a pending exclusive lock", {})},
    {ErrDataOutOfRange, Message("%s value is out of range in '%s'", {})},
    {ErrWrongSpvarTypeInLimit, Message("A variable of a non-integer based type in LIMIT clause", {})},
    {ErrBinlogUnsafeMultipleEnginesAndSelfLoggingEngine,
     Message("Mixing self-logging and non-self-logging engines in a statement is unsafe.", {})},
    {ErrBinlogUnsafeMixedStatement, Message("Statement accesses nontransactional table as well as transactional or "
                                            "temporary table, and writes to any of them.",
                                            {})},
    {ErrInsideTransactionPreventsSwitchSQLLogBin,
     Message("Cannot modify @@session.sqlLogBin inside a transaction", {})},
    {ErrStoredFunctionPreventsSwitchSQLLogBin,
     Message("Cannot change the sqlLogBin inside a stored function or trigger", {})},
    {ErrFailedReadFromParFile, Message("Failed to read from the .par file", {})},
    {ErrValuesIsNotIntType, Message("VALUES value for partition '%-.64s' must have type INT", {})},
    {ErrAccessDeniedNoPassword, Message("Access denied for user '%-.48s'@'%-.64s'", {})},
    {ErrSetPasswordAuthPlugin, Message("SET PASSWORD has no significance for users authenticating via plugins", {})},
    {ErrGrantPluginUserExists,
     Message("GRANT with IDENTIFIED WITH is illegal because the user %-.*s already exists", {})},
    {ErrTruncateIllegalFk, Message("Cannot truncate a table referenced in a foreign key constraint (%.192s)", {})},
    {ErrPluginIsPermanent, Message("Plugin '%s' is forcePlusPermanent and can not be unloaded", {})},
    {ErrSlaveHeartbeatValueOutOfRangeMin,
     Message("The requested value for the heartbeat period is less than 1 millisecond. The value is reset to 0, "
             "meaning that heartbeating will effectively be disabled.",
             {})},
    {ErrSlaveHeartbeatValueOutOfRangeMax,
     Message("The requested value for the heartbeat period exceeds the value of `slaveNetTimeout' seconds. A sensible "
             "value for the period should be less than the timeout.",
             {})},
    {ErrStmtCacheFull, Message("Multi-row statements required more than 'maxBinlogStmtCacheSize' bytes of storage; "
                               "increase this mysqld variable and try again",
                               {})},
    {ErrMultiUpdateKeyConflict,
     Message(
         "Primary key/partition key update is not allowed since the table is updated both as '%-.192s' and '%-.192s'.",
         {})},
    {ErrTableNeedsRebuild,
     Message("Table rebuild required. Please do \"ALTER TABLE `%-.32s` FORCE\" or dump/reload to fix it!", {})},
    {WarnOptionBelowLimit, Message("The value of '%s' should be no less than the value of '%s'", {})},
    {ErrIndexColumnTooLong, Message("Index column size too large. The maximum column size is %d bytes.", {})},
    {ErrErrorInTriggerBody, Message("Trigger '%-.64s' has an error in its body: '%-.256s'", {})},
    {ErrErrorInUnknownTriggerBody, Message("Unknown trigger has an error in its body: '%-.256s'", {})},
    {ErrIndexCorrupt, Message("Index %s is corrupted", {})},
    {ErrUndoRecordTooBig, Message("Undo log record is too big.", {})},
    {ErrBinlogUnsafeInsertIgnoreSelect,
     Message("INSERT IGNORE... SELECT is unsafe because the order in which rows are retrieved by the SELECT determines "
             "which (if any) rows are ignored. This order cannot be predicted and may differ on master and the slave.",
             {})},
    {ErrBinlogUnsafeInsertSelectUpdate,
     Message("INSERT... SELECT... ON DUPLICATE KEY UPDATE is unsafe because the order in which rows are retrieved by "
             "the SELECT determines which (if any) rows are updated. This order cannot be predicted and may differ on "
             "master and the slave.",
             {})},
    {ErrBinlogUnsafeReplaceSelect,
     Message("REPLACE... SELECT is unsafe because the order in which rows are retrieved by the SELECT determines which "
             "(if any) rows are replaced. This order cannot be predicted and may differ on master and the slave.",
             {})},
    {ErrBinlogUnsafeCreateIgnoreSelect,
     Message("CREATE... IGNORE SELECT is unsafe because the order in which rows are retrieved by the SELECT determines "
             "which (if any) rows are ignored. This order cannot be predicted and may differ on master and the slave.",
             {})},
    {ErrBinlogUnsafeCreateReplaceSelect,
     Message(
         "CREATE... REPLACE SELECT is unsafe because the order in which rows are retrieved by the SELECT determines "
         "which (if any) rows are replaced. This order cannot be predicted and may differ on master and the slave.",
         {})},
    {ErrBinlogUnsafeUpdateIgnore,
     Message("UPDATE IGNORE is unsafe because the order in which rows are updated determines which (if any) rows are "
             "ignored. This order cannot be predicted and may differ on master and the slave.",
             {})},
    {ErrPluginNoUninstall,
     Message("Plugin '%s' is marked as not dynamically uninstallable. You have to stop the server to uninstall it.",
             {})},
    {ErrPluginNoInstall,
     Message("Plugin '%s' is marked as not dynamically installable. You have to stop the server to install it.", {})},
    {ErrBinlogUnsafeWriteAutoincSelect,
     Message("Statements writing to a table with an auto-increment column after selecting from another table are "
             "unsafe because the order in which rows are retrieved determines what (if any) rows will be written. This "
             "order cannot be predicted and may differ on master and the slave.",
             {})},
    {ErrBinlogUnsafeCreateSelectAutoinc,
     Message("CREATE TABLE... SELECT...  on a table with an auto-increment column is unsafe because the order in which "
             "rows are retrieved by the SELECT determines which (if any) rows are inserted. This order cannot be "
             "predicted and may differ on master and the slave.",
             {})},
    {ErrBinlogUnsafeInsertTwoKeys,
     Message("INSERT... ON DUPLICATE KEY UPDATE  on a table with more than one UNIQUE KEY is unsafe", {})},
    {ErrTableInFkCheck, Message("Table is being used in foreign key check.", {})},
    {ErrUnsupportedEngine, Message("Storage engine '%s' does not support system tables. [%s.%s]", {})},
    {ErrBinlogUnsafeAutoincNotFirst,
     Message("INSERT into autoincrement field which is not the first part in the composed primary key is unsafe.", {})},
    {ErrCannotLoadFromTableV2, Message("Cannot load from %s.%s. The table is probably corrupted", {})},
    {ErrMasterDelayValueOutOfRange, Message("The requested value %d for the master delay exceeds the maximum %d", {})},
    {ErrOnlyFdAndRbrEventsAllowedInBinlogStatement,
     Message("Only FormatDescriptionLogEvent and row events are allowed in BINLOG statements (but %s was provided)",
             {})},
    {ErrPartitionExchangeDifferentOption, Message("Non matching attribute '%-.64s' between partition and table", {})},
    {ErrPartitionExchangePartTable, Message("Table to exchange with partition is partitioned: '%-.64s'", {})},
    {ErrPartitionExchangeTempTable, Message("Table to exchange with partition is temporary: '%-.64s'", {})},
    {ErrPartitionInsteadOfSubpartition, Message("Subpartitioned table, use subpartition instead of partition", {})},
    {ErrUnknownPartition, Message("Unknown partition '%-.64s' in table '%-.64s'", {})},
    {ErrTablesDifferentMetadata, Message("Tables have different definitions", {})},
    {ErrRowDoesNotMatchPartition, Message("Found a row that does not match the partition", {})},
    {ErrBinlogCacheSizeGreaterThanMax, Message("Option binlogCacheSize (%d) is greater than maxBinlogCacheSize (%d); "
                                               "setting binlogCacheSize equal to maxBinlogCacheSize.",
                                               {})},
    {ErrWarnIndexNotApplicable,
     Message("Cannot use %-.64s access on index '%-.64s' due to type or collation conversion on field '%-.64s'", {})},
    {ErrPartitionExchangeForeignKey,
     Message("Table to exchange with partition has foreign key references: '%-.64s'", {})},
    {ErrNoSuchKeyValue, Message("Key value '%-.192s' was not found in table '%-.192s.%-.192s'", {})},
    {ErrRplInfoDataTooLong, Message("Data for column '%s' too long", {})},
    {ErrNetworkReadEventChecksumFailure,
     Message("Replication event checksum verification failed while reading from network.", {})},
    {ErrBinlogReadEventChecksumFailure,
     Message("Replication event checksum verification failed while reading from a log file.", {})},
    {ErrBinlogStmtCacheSizeGreaterThanMax,
     Message("Option binlogStmtCacheSize (%d) is greater than maxBinlogStmtCacheSize (%d); setting binlogStmtCacheSize "
             "equal to maxBinlogStmtCacheSize.",
             {})},
    {ErrCantUpdateTableInCreateTableSelect,
     Message("Can't update table '%-.192s' while '%-.192s' is being created.", {})},
    {ErrPartitionClauseOnNonpartitioned, Message("PARTITION () clause on non partitioned table", {})},
    {ErrRowDoesNotMatchGivenPartitionSet, Message("Found a row not matching the given partition set", {})},
    {ErrNoSuchPartitionunused, Message("partition '%-.64s' doesn't exist", {})},
    {ErrChangeRplInfoRepositoryFailure, Message("Failure while changing the type of replication repository: %s.", {})},
    {ErrWarningNotCompleteRollbackWithCreatedTempTable,
     Message("The creation of some temporary tables could not be rolled back.", {})},
    {ErrWarningNotCompleteRollbackWithDroppedTempTable,
     Message("Some temporary tables were dropped, but these operations could not be rolled back.", {})},
    {ErrMtsFeatureIsNotSupported, Message("%s is not supported in multi-threaded slave mode. %s", {})},
    {ErrMtsUpdatedDBsGreaterMax, Message("The number of modified databases exceeds the maximum %d; the database names "
                                         "will not be included in the replication event metadata.",
                                         {})},
    {ErrMtsCantParallel,
     Message("Cannot execute the current event group in the parallel mode. Encountered event %s, relay-log name %s, "
             "position %s which prevents execution of this event group in parallel mode. Reason: %s.",
             {})},
    {ErrMtsInconsistentData, Message("%s", {})},
    {ErrFulltextNotSupportedWithPartitioning, Message("FULLTEXT index is not supported for partitioned tables.", {})},
    {ErrDaInvalidConditionNumber, Message("Invalid condition number", {})},
    {ErrInsecurePlainText, Message("Sending passwords in plain text without SSL/TLS is extremely insecure.", {})},
    {ErrInsecureChangeMaster,
     Message(
         "Storing MySQL user name or password information in the master.info repository is not secure and is therefore "
         "not recommended. Please see the MySQL Manual for more about this issue and possible alternatives.",
         {})},
    {ErrForeignDuplicateKeyWithChildInfo, Message("Foreign key constraint for table '%.192s', record '%-.192s' would "
                                                  "lead to a duplicate entry in table '%.192s', key '%.192s'",
                                                  {})},
    {ErrForeignDuplicateKeyWithoutChildInfo,
     Message(
         "Foreign key constraint for table '%.192s', record '%-.192s' would lead to a duplicate entry in a child table",
         {})},
    {ErrSQLthreadWithSecureSlave,
     Message("Setting authentication options is not possible when only the Slave SQL Thread is being started.", {})},
    {ErrTableHasNoFt, Message("The table does not have FULLTEXT index to support this query", {})},
    {ErrVariableNotSettableInSfOrTrigger,
     Message("The system variable %.200s cannot be set in stored functions or triggers.", {})},
    {ErrVariableNotSettableInTransaction,
     Message("The system variable %.200s cannot be set when there is an ongoing transaction.", {})},
    {ErrGtidNextIsNotInGtidNextList,
     Message(
         "The system variable @@SESSION.GTIDNEXT has the value %.200s, which is not listed in @@SESSION.GTIDNEXTLIST.",
         {})},
    {ErrCantChangeGtidNextInTransactionWhenGtidNextListIsNull,
     Message("When @@SESSION.GTIDNEXTLIST == NULL, the system variable @@SESSION.GTIDNEXT cannot change inside a "
             "transaction.",
             {})},
    {ErrSetStatementCannotInvokeFunction, Message("The statement 'SET %.200s' cannot invoke a stored function.", {})},
    {ErrGtidNextCantBeAutomaticIfGtidNextListIsNonNull,
     Message("The system variable @@SESSION.GTIDNEXT cannot be 'AUTOMATIC' when @@SESSION.GTIDNEXTLIST is non-NULL.",
             {})},
    {ErrSkippingLoggedTransaction,
     Message("Skipping transaction %.200s because it has already been executed and logged.", {})},
    {ErrMalformedGtidSetSpecification, Message("Malformed GTID set specification '%.200s'.", {})},
    {ErrMalformedGtidSetEncoding, Message("Malformed GTID set encoding.", {})},
    {ErrMalformedGtidSpecification, Message("Malformed GTID specification '%.200s'.", {})},
    {ErrGnoExhausted, Message("Impossible to generate Global Transaction Identifier: the integer component reached the "
                              "maximal value. Restart the server with a new serverUuid.",
                              {})},
    {ErrBadSlaveAutoPosition, Message("Parameters MASTERLOGFILE, MASTERLOGPOS, RELAYLOGFILE and RELAYLOGPOS cannot be "
                                      "set when MASTERAUTOPOSITION is active.",
                                      {})},
    {ErrAutoPositionRequiresGtidModeOn,
     Message("CHANGE MASTER TO MASTERAUTOPOSITION = 1 can only be executed when @@GLOBAL.GTIDMODE = ON.", {})},
    {ErrCantDoImplicitCommitInTrxWhenGtidNextIsSet,
     Message("Cannot execute statements with implicit commit inside a transaction when @@SESSION.GTIDNEXT != AUTOMATIC "
             "or @@SESSION.GTIDNEXTLIST != NULL.",
             {})},
    {ErrGtidMode2Or3RequiresEnforceGtidConsistencyOn,
     Message("@@GLOBAL.GTIDMODE = ON or UPGRADESTEP2 requires @@GLOBAL.ENFORCEGTIDCONSISTENCY = 1.", {})},
    {ErrGtidModeRequiresBinlog,
     Message("@@GLOBAL.GTIDMODE = ON or UPGRADESTEP1 or UPGRADESTEP2 requires --log-bin and --log-slave-updates.", {})},
    {ErrCantSetGtidNextToGtidWhenGtidModeIsOff,
     Message("@@SESSION.GTIDNEXT cannot be set to UUID:NUMBER when @@GLOBAL.GTIDMODE = OFF.", {})},
    {ErrCantSetGtidNextToAnonymousWhenGtidModeIsOn,
     Message("@@SESSION.GTIDNEXT cannot be set to ANONYMOUS when @@GLOBAL.GTIDMODE = ON.", {})},
    {ErrCantSetGtidNextListToNonNullWhenGtidModeIsOff,
     Message("@@SESSION.GTIDNEXTLIST cannot be set to a non-NULL value when @@GLOBAL.GTIDMODE = OFF.", {})},
    {ErrFoundGtidEventWhenGtidModeIsOff,
     Message("Found a GtidLogEvent or PreviousGtidsLogEvent when @@GLOBAL.GTIDMODE = OFF.", {})},
    {ErrGtidUnsafeNonTransactionalTable,
     Message("When @@GLOBAL.ENFORCEGTIDCONSISTENCY = 1, updates to non-transactional tables can only be done in either "
             "autocommitted statements or single-statement transactions, and never in the same statement as updates to "
             "transactional tables.",
             {})},
    {ErrGtidUnsafeCreateSelect,
     Message("CREATE TABLE ... SELECT is forbidden when @@GLOBAL.ENFORCEGTIDCONSISTENCY = 1.", {})},
    {ErrGtidUnsafeCreateDropTemporaryTableInTransaction,
     Message("When @@GLOBAL.ENFORCEGTIDCONSISTENCY = 1, the statements CREATE TEMPORARY TABLE and DROP TEMPORARY TABLE "
             "can be executed in a non-transactional context only, and require that AUTOCOMMIT = 1.",
             {})},
    {ErrGtidModeCanOnlyChangeOneStepAtATime,
     Message("The value of @@GLOBAL.GTIDMODE can only change one step at a time: OFF <-> UPGRADESTEP1 <-> UPGRADESTEP2 "
             "<-> ON. Also note that this value must be stepped up or down simultaneously on all servers; see the "
             "Manual for instructions.",
             {})},
    {ErrMasterHasPurgedRequiredGtids,
     Message("The slave is connecting using CHANGE MASTER TO MASTERAUTOPOSITION = 1, but the master has purged binary "
             "logs containing GTIDs that the slave requires.",
             {})},
    {ErrCantSetGtidNextWhenOwningGtid, Message("@@SESSION.GTIDNEXT cannot be changed by a client that owns a GTID. The "
                                               "client owns %s. Ownership is released on COMMIT or ROLLBACK.",
                                               {})},
    {ErrUnknownExplainFormat, Message("Unknown EXPLAIN format name: '%s'", {})},
    {ErrCantExecuteInReadOnlyTransaction, Message("Cannot execute statement in a READ ONLY transaction.", {})},
    {ErrTooLongTablePartitionComment, Message("Comment for table partition '%-.64s' is too long (max = %d)", {})},
    {ErrSlaveConfiguration,
     Message("Slave is not configured or failed to initialize properly. You must at least set --server-id to enable "
             "either a master or a slave. Additional error messages can be found in the MySQL error log.",
             {})},
    {ErrInnodbFtLimit, Message("InnoDB presently supports one FULLTEXT index creation at a time", {})},
    {ErrInnodbNoFtTempTable, Message("Cannot create FULLTEXT index on temporary InnoDB table", {})},
    {ErrInnodbFtWrongDocidColumn, Message("Column '%-.192s' is of wrong type for an InnoDB FULLTEXT index", {})},
    {ErrInnodbFtWrongDocidIndex, Message("Index '%-.192s' is of wrong type for an InnoDB FULLTEXT index", {})},
    {ErrInnodbOnlineLogTooBig, Message("Creating index '%-.192s' required more than 'innodbOnlineAlterLogMaxSize' "
                                       "bytes of modification log. Please try again.",
                                       {})},
    {ErrUnknownAlterAlgorithm, Message("Unknown ALGORITHM '%s'", {})},
    {ErrUnknownAlterLock, Message("Unknown LOCK type '%s'", {})},
    {ErrMtsChangeMasterCantRunWithGaps,
     Message("CHANGE MASTER cannot be executed when the slave was stopped with an error or killed in MTS mode. "
             "Consider using RESET SLAVE or START SLAVE UNTIL.",
             {})},
    {ErrMtsRecoveryFailure, Message("Cannot recover after SLAVE errored out in parallel execution mode. Additional "
                                    "error messages can be found in the MySQL error log.",
                                    {})},
    {ErrMtsResetWorkers,
     Message("Cannot clean up worker info tables. Additional error messages can be found in the MySQL error log.", {})},
    {ErrColCountDoesntMatchCorruptedV2,
     Message("Column count of %s.%s is wrong. Expected %d, found %d. The table is probably corrupted", {})},
    {ErrSlaveSilentRetryTransaction, Message("Slave must silently retry current transaction", {})},
    {ErrDiscardFkChecksRunning,
     Message("There is a foreign key check running on table '%-.192s'. Cannot discard the table.", {})},
    {ErrTableSchemaMismatch, Message("Schema mismatch (%s)", {})},
    {ErrTableInSystemTablespace, Message("Table '%-.192s' in system tablespace", {})},
    {ErrIoRead, Message("IO Read : (%d, %s) %s", {})},
    {ErrIoWrite, Message("IO Write : (%d, %s) %s", {})},
    {ErrTablespaceMissing, Message("Tablespace is missing for table '%-.192s'", {})},
    {ErrTablespaceExists,
     Message("Tablespace for table '%-.192s' exists. Please DISCARD the tablespace before IMPORT.", {})},
    {ErrTablespaceDiscarded, Message("Tablespace has been discarded for table '%-.192s'", {})},
    {ErrInternal, Message("Internal : %s", {})},
    {ErrInnodbImport, Message("ALTER TABLE '%-.192s' IMPORT TABLESPACE failed with error %d : '%s'", {})},
    {ErrInnodbIndexCorrupt, Message("Index corrupt: %s", {})},
    {ErrInvalidYearColumnLength, Message("Supports only YEAR or YEAR(4) column", {})},
    {ErrNotValidPassword, Message("Your password does not satisfy the current policy requirements", {})},
    {ErrMustChangePassword, Message("You must SET PASSWORD before executing this statement", {})},
    {ErrFkNoIndexChild,
     Message("Failed to add the foreign key constaint. Missing index for constraint '%s' in the foreign table '%s'",
             {})},
    {ErrFkNoIndexParent,
     Message("Failed to add the foreign key constaint. Missing index for constraint '%s' in the referenced table '%s'",
             {})},
    {ErrFkFailAddSystem, Message("Failed to add the foreign key constraint '%s' to system tables", {})},
    {ErrFkCannotOpenParent, Message("Failed to open the referenced table '%s'", {})},
    {ErrFkIncorrectOption,
     Message("Failed to add the foreign key constraint on table '%s'. Incorrect options in FOREIGN KEY constraint '%s'",
             {})},
    {ErrFkDupName, Message("Duplicate foreign key constraint name '%s'", {})},
    {ErrPasswordFormat, Message("The password hash doesn't have the expected format. Check if the correct password "
                                "algorithm is being used with the PASSWORD() function.",
                                {})},
    {ErrFkColumnCannotDrop, Message("Cannot drop column '%-.192s': needed in a foreign key constraint '%-.192s'", {})},
    {ErrFkColumnCannotDropChild,
     Message("Cannot drop column '%-.192s': needed in a foreign key constraint '%-.192s' of table '%-.192s'", {})},
    {ErrFkColumnNotNull,
     Message("Column '%-.192s' cannot be NOT NULL: needed in a foreign key constraint '%-.192s' SET NULL", {})},
    {ErrDupIndex, Message("Duplicate index '%-.64s' defined on the table '%-.64s.%-.64s'. This is deprecated and will "
                          "be disallowed in a future release.",
                          {})},
    {ErrFkColumnCannotChange,
     Message("Cannot change column '%-.192s': used in a foreign key constraint '%-.192s'", {})},
    {ErrFkColumnCannotChangeChild,
     Message("Cannot change column '%-.192s': used in a foreign key constraint '%-.192s' of table '%-.192s'", {})},
    {ErrFkCannotDeleteParent,
     Message("Cannot delete rows from table which is parent in a foreign key constraint '%-.192s' of table '%-.192s'",
             {})},
    {ErrMalformedPacket, Message("Malformed communication packet.", {})},
    {ErrReadOnlyMode, Message("Running in read-only mode", {})},
    {ErrGtidNextTypeUndefinedGroup,
     Message("When @@SESSION.GTIDNEXT is set to a GTID, you must explicitly set it again after a COMMIT or ROLLBACK. "
             "If you see this error message in the slave SQL thread, it means that a table in the current transaction "
             "is transactional on the master and non-transactional on the slave. In a client connection, it means that "
             "you executed SET @@SESSION.GTIDNEXT before a transaction and forgot to set @@SESSION.GTIDNEXT to a "
             "different identifier or to 'AUTOMATIC' after COMMIT or ROLLBACK. Current @@SESSION.GTIDNEXT is '%s'.",
             {})},
    {ErrVariableNotSettableInSp, Message("The system variable %.200s cannot be set in stored procedures.", {})},
    {ErrCantSetGtidPurgedWhenGtidModeIsOff,
     Message("@@GLOBAL.GTIDPURGED can only be set when @@GLOBAL.GTIDMODE = ON.", {})},
    {ErrCantSetGtidPurgedWhenGtidExecutedIsNotEmpty,
     Message("@@GLOBAL.GTIDPURGED can only be set when @@GLOBAL.GTIDEXECUTED is empty.", {})},
    {ErrCantSetGtidPurgedWhenOwnedGtidsIsNotEmpty,
     Message("@@GLOBAL.GTIDPURGED can only be set when there are no ongoing transactions (not even in other clients).",
             {})},
    {ErrGtidPurgedWasChanged, Message("@@GLOBAL.GTIDPURGED was changed from '%s' to '%s'.", {})},
    {ErrGtidExecutedWasChanged, Message("@@GLOBAL.GTIDEXECUTED was changed from '%s' to '%s'.", {})},
    {ErrBinlogStmtModeAndNoReplTables,
     Message("Cannot execute statement: impossible to write to binary log since BINLOGFORMAT = STATEMENT, and both "
             "replicated and non replicated tables are written to.",
             {})},
    {ErrAlterOperationNotSupported, Message("%s is not supported for this operation. Try %s.", {})},
    {ErrAlterOperationNotSupportedReason, Message("%s is not supported. Reason: %s. Try %s.", {})},
    {ErrAlterOperationNotSupportedReasonCopy, Message("COPY algorithm requires a lock", {})},
    {ErrAlterOperationNotSupportedReasonPartition,
     Message("Partition specific operations do not yet support LOCK/ALGORITHM", {})},
    {ErrAlterOperationNotSupportedReasonFkRename, Message("Columns participating in a foreign key are renamed", {})},
    {ErrAlterOperationNotSupportedReasonColumnType, Message("Cannot change column type INPLACE", {})},
    {ErrAlterOperationNotSupportedReasonFkCheck, Message("Adding foreign keys needs foreignKeyChecks=OFF", {})},
    {ErrAlterOperationNotSupportedReasonIgnore,
     Message("Creating unique indexes with IGNORE requires COPY algorithm to remove duplicate rows", {})},
    {ErrAlterOperationNotSupportedReasonNopk,
     Message("Dropping a primary key is not allowed without also adding a new primary key", {})},
    {ErrAlterOperationNotSupportedReasonAutoinc, Message("Adding an auto-increment column requires a lock", {})},
    {ErrAlterOperationNotSupportedReasonHiddenFts,
     Message("Cannot replace hidden FTSDOCID with a user-visible one", {})},
    {ErrAlterOperationNotSupportedReasonChangeFts, Message("Cannot drop or rename FTSDOCID", {})},
    {ErrAlterOperationNotSupportedReasonFts, Message("Fulltext index creation requires a lock", {})},
    {ErrSQLSlaveSkipCounterNotSettableInGtidMode,
     Message(
         "sqlSlaveSkipCounter can not be set when the server is running with @@GLOBAL.GTIDMODE = ON. Instead, for each "
         "transaction that you want to skip, generate an empty transaction with the same GTID as the transaction",
         {})},
    {ErrDupUnknownInIndex, Message("Duplicate entry for key '%-.192s'", {})},
    {ErrIdentCausesTooLongPath,
     Message(
         "Long database name and identifier for object resulted in path length exceeding %d characters. Path: '%s'.",
         {})},
    {ErrAlterOperationNotSupportedReasonNotNull,
     Message("cannot silently convert NULL values, as required in this SQLMODE", {})},
    {ErrMustChangePasswordLogin,
     Message("Your password has expired. To log in you must change it using a client that supports expired passwords.",
             {})},
    {ErrRowInWrongPartition, Message("Found a row in wrong partition %s", {})},
    {ErrGeneratedColumnFunctionIsNotAllowed,
     Message("Expression of generated column '%s' contains a disallowed function.", {})},
    {ErrUnsupportedAlterInplaceOnVirtualColumn,
     Message("INPLACE ADD or DROP of virtual columns cannot be combined with other ALTER TABLE actions.", {})},
    {ErrWrongFKOptionForGeneratedColumn,
     Message("Cannot define foreign key with %s clause on a generated column.", {})},
    {ErrBadGeneratedColumn, Message("The value specified for generated column '%s' in table '%s' is not allowed.", {})},
    {ErrUnsupportedOnGeneratedColumn, Message("'%s' is not supported for generated columns.", {})},
    {ErrGeneratedColumnNonPrior,
     Message("Generated column can refer only to generated columns defined prior to it.", {})},
    {ErrDependentByGeneratedColumn, Message("Column '%s' has a generated column dependency.", {})},
    {ErrGeneratedColumnRefAutoInc, Message("Generated column '%s' cannot refer to auto-increment column.", {})},
    {ErrInvalidFieldSize, Message("Invalid size for column '%s'.", {})},
    {ErrIncorrectType, Message("Incorrect type for argument %s in function %s.", {})},
    {ErrInvalidJSONData, Message("Invalid JSON data provided to function %s: %s", {})},
    {ErrInvalidJSONText, Message("Invalid JSON text: %-.192s", {})},
    {ErrInvalidJSONPath, Message("Invalid JSON path expression %s.", {})},
    {ErrInvalidTypeForJSON,
     Message("Invalid data type for JSON data in argument %d to function %s; a JSON string or JSON type is required.",
             {})},
    {ErrInvalidJSONPathWildcard,
     Message("In this situation, path expressions may not contain the * and ** tokens.", {})},
    {ErrInvalidJSONContainsPathType, Message("The second argument can only be either 'one' or 'all'.", {})},
    {ErrJSONUsedAsKey, Message("JSON column '%-.192s' cannot be used in key specification.", {})},
    {ErrJSONDocumentNULLKey, Message("JSON documents may not contain NULL member names.", {})},
    {ErrBadUser, Message("User %s does not exist.", {})},
    {ErrUserAlreadyExists, Message("User %s already exists.", {})},
    {ErrInvalidJSONPathArrayCell, Message("A path expression is not a path to a cell in an array.", {})},
    {ErrInvalidEncryptionOption, Message("Invalid encryption option.", {})},
    {ErrWindowNoSuchWindow, Message("Window name '%s' is not defined.", {})},
    {ErrWindowCircularityInWindowGraph, Message("There is a circularity in the window dependency graph.", {})},
    {ErrWindowNoChildPartitioning, Message("A window which depends on another cannot define partitioning.", {})},
    {ErrWindowNoInherentFrame,
     Message("Window '%s' has a frame definition, so cannot be referenced by another window.", {})},
    {ErrWindowNoRedefineOrderBy, Message("Window '%s' cannot inherit '%s' since both contain an ORDER BY clause.", {})},
    {ErrWindowFrameStartIllegal, Message("Window '%s': frame start cannot be UNBOUNDED FOLLOWING.", {})},
    {ErrWindowFrameEndIllegal, Message("Window '%s': frame end cannot be UNBOUNDED PRECEDING.", {})},
    {ErrWindowFrameIllegal, Message("Window '%s': frame start or end is negative, NULL or of non-integral type", {})},
    {ErrWindowRangeFrameOrderType, Message("Window '%s' with RANGE N PRECEDING/FOLLOWING frame requires exactly one "
                                           "ORDER BY expression, of numeric or temporal type",
                                           {})},
    {ErrWindowRangeFrameTemporalType,
     Message(
         "Window '%s' with RANGE frame has ORDER BY expression of datetime type. Only INTERVAL bound value allowed.",
         {})},
    {ErrWindowRangeFrameNumericType,
     Message("Window '%s' with RANGE frame has ORDER BY expression of numeric type, INTERVAL bound value not allowed.",
             {})},
    {ErrWindowRangeBoundNotConstant, Message("Window '%s' has a non-constant frame bound.", {})},
    {ErrWindowDuplicateName, Message("Window '%s' is defined twice.", {})},
    {ErrWindowIllegalOrderBy, Message("Window '%s': ORDER BY or PARTITION BY uses legacy position indication which is "
                                      "not supported, use expression.",
                                      {})},
    {ErrWindowInvalidWindowFuncUse, Message("You cannot use the window function '%s' in this context.'", {})},
    {ErrWindowInvalidWindowFuncAliasUse,
     Message("You cannot use the alias '%s' of an expression containing a window function in this context.'", {})},
    {ErrWindowNestedWindowFuncUseInWindowSpec,
     Message("You cannot nest a window function in the specification of window '%s'.", {})},
    {ErrWindowRowsIntervalUse, Message("Window '%s': INTERVAL can only be used with RANGE frames.", {})},
    {ErrWindowNoGroupOrderUnused,
     Message("ASC or DESC with GROUP BY isn't allowed with window functions; put ASC or DESC in ORDER BY", {})},
    {ErrWindowExplainJson, Message("To get information about window functions use EXPLAIN FORMAT=JSON", {})},
    {ErrWindowFunctionIgnoresFrame,
     Message("Window function '%s' ignores the frame clause of window '%s' and aggregates over the whole partition",
             {})},
    {ErrRoleNotGranted, Message("%s is not granted to %s", {})},
    {ErrMaxExecTimeExceeded, Message("Query execution was interrupted, max_execution_time exceeded.", {})},
    {ErrLockAcquireFailAndNoWaitSet,
     Message("Statement aborted because lock(s) could not be acquired immediately and NOWAIT is set.", {})},
    {ErrDataTruncatedFunctionalIndex, Message("Data truncated for functional index '%s' at row %d", {})},
    {ErrDataOutOfRangeFunctionalIndex, Message("Value is out of range for functional index '%s' at row %d", {})},
    {ErrFunctionalIndexOnJsonOrGeometryFunction,
     Message("Cannot create a functional index on a function that returns a JSON or GEOMETRY value", {})},
    {ErrFunctionalIndexRefAutoIncrement, Message("Functional index '%s' cannot refer to an auto-increment column", {})},
    {ErrCannotDropColumnFunctionalIndex, Message("Cannot drop column '%s' because it is used by a functional index. In "
                                                 "order to drop the column, you must remove the functional index",
                                                 {})},
    {ErrFunctionalIndexPrimaryKey, Message("The primary key cannot be a functional index", {})},
    {ErrFunctionalIndexOnLob,
     Message(
         "Cannot create a functional index on an expression that returns a BLOB or TEXT. Please consider using CAST",
         {})},
    {ErrFunctionalIndexFunctionIsNotAllowed,
     Message("Expression of functional index '%s' contains a disallowed function", {})},
    {ErrFulltextFunctionalIndex, Message("Fulltext functional index is not supported", {})},
    {ErrSpatialFunctionalIndex, Message("Spatial functional index is not supported", {})},
    {ErrWrongKeyColumnFunctionalIndex, Message("The used storage engine cannot index the expression '%s'", {})},
    {ErrFunctionalIndexOnField,
     Message("Functional index on a column is not supported. Consider using a regular index instead", {})},
    {ErrFKIncompatibleColumns, Message("Referencing column '%s' in foreign key constraint '%s' are incompatible", {})},
    {ErrFunctionalIndexRowValueIsNotAllowed,
     Message("Expression of functional index '%s' cannot refer to a row value", {})},
    {ErrDependentByFunctionalIndex,
     Message("Column '%s' has a functional index dependency and cannot be dropped or renamed", {})},
    {ErrInvalidJsonValueForFuncIndex, Message("Invalid JSON value for CAST for functional index '%s'", {})},
    {ErrJsonValueOutOfRangeForFuncIndex, Message("Out of range JSON value for CAST for functional index '%s'", {})},
    {ErrFunctionalIndexDataIsTooLong, Message("Data too long for functional index '%s'", {})},
    {ErrFunctionalIndexNotApplicable,
     Message("Cannot use functional index '%s' due to type or collation conversion", {})},

    // MariaDB errors.
    {ErrOnlyOneDefaultPartionAllowed, Message("Only one DEFAULT partition allowed", {})},
    {ErrWrongPartitionTypeExpectedSystemTime, Message("Wrong partitioning type, expected type: `SYSTEM_TIME`", {})},
    {ErrSystemVersioningWrongPartitions,
     Message("Wrong Partitions: must have at least one HISTORY and exactly one last CURRENT", {})},
    {ErrSequenceRunOut, Message("Sequence '%-.64s.%-.64s' has run out", {})},
    {ErrSequenceInvalidData, Message("Sequence '%-.64s.%-.64s' values are conflicting", {})},
    {ErrSequenceAccessFail, Message("Sequence '%-.64s.%-.64s' access error", {})},
    {ErrNotSequence, Message("'%-.64s.%-.64s' is not a SEQUENCE", {})},
    {ErrUnknownSequence, Message("Unknown SEQUENCE: '%-.300s'", {})},
    {ErrWrongInsertIntoSequence,
     Message("Wrong INSERT into a SEQUENCE. One can only do single table INSERT into a sequence object (like with "
             "mysqldump).  If you want to change the SEQUENCE, use ALTER SEQUENCE instead.",
             {})},
    {ErrSequenceInvalidTableStructure, Message("Sequence '%-.64s.%-.64s' table structure is invalid (%s)", {})},

    // TiDB errors.
    {ErrWarnOptimizerHintInvalidInteger, Message("integer value is out of range in '%s'", {})},
    {ErrWarnOptimizerHintUnsupportedHint, Message("Optimizer hint %s is not supported by TiDB and is ignored", {})},
    {ErrWarnOptimizerHintInvalidToken, Message("Cannot use %s '%s' (tok = %d) in an optimizer hint", {})},
    {ErrWarnMemoryQuotaOverflow, Message("Max value of MEMORY_QUOTA is %d bytes, ignore this invalid limit", {})},
    {ErrWarnOptimizerHintParseError, Message("Optimizer hint syntax error at %v", {})},

};

}  // namespace mysql