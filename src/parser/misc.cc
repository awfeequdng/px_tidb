#include "parser/misc.hh"

#include "parser/lexer.hh"
#include "parser/scanner.hh"
#include "parser/token.hh"

namespace parser {
std::shared_ptr<trieNode> ruleTable = std::make_shared<trieNode>();

std::shared_ptr<trieNode> getRuleTable() { return ruleTable; }

void initTokenByte(uint8_t c, int tok) {
    if (ruleTable->childs[c] == nullptr) {
        ruleTable->childs[c] = std::make_shared<trieNode>();
    }
    ruleTable->childs[c]->token = tok;
}

void initTokenString(std::string str, int tok) {
    auto node = ruleTable;
    for (unsigned char ch : str) {
        auto id = static_cast<size_t>(ch);
        if (node->childs[id] == nullptr) {
            node->childs[id] = std::make_shared<trieNode>();
        }
        node = node->childs[id];
    }
    node->token = tok;
}

void initTokenFunc(std::string str, trieFunc fn) {
    for (unsigned char ch : str) {
        if (ruleTable->childs[ch] == nullptr) {
            ruleTable->childs[ch] = std::make_shared<trieNode>();
        }
        ruleTable->childs[ch]->fn = fn;
    }
}

void init() {
    ruleTable->token = tok_invalid;
    initTokenByte('/', int('/'));
    initTokenByte('+', int('+'));
    initTokenByte('>', int('>'));
    initTokenByte('<', int('<'));
    initTokenByte('(', int('('));
    initTokenByte(')', int(')'));
    initTokenByte('[', int('['));
    initTokenByte(']', int(']'));
    initTokenByte(';', int(';'));
    initTokenByte(',', int(','));
    initTokenByte('&', int('&'));
    initTokenByte('%', int('%'));
    initTokenByte(':', int(':'));
    initTokenByte('|', int('|'));
    initTokenByte('!', int('!'));
    initTokenByte('^', int('^'));
    initTokenByte('~', int('~'));
    initTokenByte('\\', int('\\'));
    initTokenByte('?', tok_paramMarker);
    initTokenByte('=', tok_eq);
    initTokenByte('{', int('{'));
    initTokenByte('}', int('}'));

    initTokenString("||", tok_pipes);
    initTokenString("&&", tok_andand);
    initTokenString("&^", tok_andnot);
    initTokenString(":=", tok_assignmentEq);
    initTokenString("<=>", tok_nulleq);
    initTokenString(">=", tok_ge);
    initTokenString("<=", tok_le);
    initTokenString("!=", tok_neq);
    initTokenString("<>", tok_neqSynonym);
    initTokenString("<<", tok_lsh);
    initTokenString(">>", tok_rsh);
    initTokenString("\\N", tok_null);

    initTokenFunc("@", startWithAt);
    initTokenFunc("/", startWithSlash);
    initTokenFunc("*", startWithStar);
    initTokenFunc("-", startWithDash);
    initTokenFunc("#", startWithSharp);
    initTokenFunc("Xx", startWithXx);
    initTokenFunc("Nn", startWithNn);
    initTokenFunc("Bb", startWithBb);
    initTokenFunc(".", startWithDot);
    initTokenFunc("_$ACDEFGHIJKLMOPQRSTUVWYZacdefghijklmopqrstuvwyz", scanIdentifier);
    initTokenFunc("`", scanQuotedIdent);
    initTokenFunc("0123456789", startWithNumber);
    initTokenFunc("'\"", startString);
}

// tokenMap is a map of known identifiers to the parser token ID.
// Please try to keep the map in alphabetical order.
std::unordered_map<std::string, int> tokenMap = {
    {"ACCOUNT", tok_account},
    {"ACTION", tok_action},
    {"ADD", tok_add},
    {"ADDDATE", tok_addDate},
    {"ADMIN", tok_admin},
    {"ADVISE", tok_advise},
    {"AFTER", tok_after},
    {"AGAINST", tok_against},
    {"AGO", tok_ago},
    {"ALGORITHM", tok_algorithm},
    {"ALL", tok_all},
    {"ALTER", tok_alter},
    {"ALWAYS", tok_always},
    {"ANALYZE", tok_analyze},
    {"AND", tok_and},
    {"ANY", tok_any},
    {"APPROX_COUNT_DISTINCT", tok_approxCountDistinct},
    {"APPROX_PERCENTILE", tok_approxPercentile},
    {"AS", tok_as},
    {"ASC", tok_asc},
    {"ASCII", tok_ascii},
    {"ATTRIBUTES", tok_attributes},
    {"AUTO_ID_CACHE", tok_autoIdCache},
    {"AUTO_INCREMENT", tok_autoIncrement},
    {"AUTO_RANDOM", tok_autoRandom},
    {"AUTO_RANDOM_BASE", tok_autoRandomBase},
    {"AVG_ROW_LENGTH", tok_avgRowLength},
    {"AVG", tok_avg},
    {"BACKEND", tok_backend},
    {"BACKUP", tok_backup},
    {"BACKUPS", tok_backups},
    {"BEGIN", tok_begin},
    {"BETWEEN", tok_between},
    {"BERNOULLI", tok_bernoulli},
    {"BIGINT", tok_bigIntType},
    {"BINARY", tok_binaryType},
    {"BINDING", tok_binding},
    {"BINDINGS", tok_bindings},
    {"BINLOG", tok_binlog},
    {"BIT_AND", tok_bitAnd},
    {"BIT_OR", tok_bitOr},
    {"BIT_XOR", tok_bitXor},
    {"BIT", tok_bitType},
    {"BLOB", tok_blobType},
    {"BLOCK", tok_block},
    {"BOOL", tok_boolType},
    {"BOOLEAN", tok_booleanType},
    {"BOTH", tok_both},
    {"BOUND", tok_bound},
    {"BRIEF", tok_briefType},
    {"BTREE", tok_btree},
    {"BUCKETS", tok_buckets},
    {"BUILTINS", tok_builtins},
    {"BY", tok_by},
    {"BYTE", tok_byteType},
    {"CACHE", tok_cache},
    {"CALL", tok_call},
    {"CANCEL", tok_cancel},
    {"CAPTURE", tok_capture},
    {"CARDINALITY", tok_cardinality},
    {"CASCADE", tok_cascade},
    {"CASCADED", tok_cascaded},
    {"CASE", tok_caseKwd},
    {"CAST", tok_cast},
    {"CAUSAL", tok_causal},
    {"CHAIN", tok_chain},
    {"CHANGE", tok_change},
    {"CHAR", tok_charType},
    {"CHARACTER", tok_character},
    {"CHARSET", tok_charsetKwd},
    {"CHECK", tok_check},
    {"CHECKPOINT", tok_checkpoint},
    {"CHECKSUM", tok_checksum},
    {"CIPHER", tok_cipher},
    {"CLEANUP", tok_cleanup},
    {"CLIENT", tok_client},
    {"CLIENT_ERRORS_SUMMARY", tok_clientErrorsSummary},
    {"CLUSTERED", tok_clustered},
    {"CMSKETCH", tok_cmSketch},
    {"COALESCE", tok_coalesce},
    {"COLLATE", tok_collate},
    {"COLLATION", tok_collation},
    {"COLUMN_FORMAT", tok_columnFormat},
    {"COLUMN_STATS_USAGE", tok_columnStatsUsage},
    {"COLUMN", tok_column},
    {"COLUMNS", tok_columns},
    {"COMMENT", tok_comment},
    {"COMMIT", tok_commit},
    {"COMMITTED", tok_committed},
    {"COMPACT", tok_compact},
    {"COMPRESSED", tok_compressed},
    {"COMPRESSION", tok_compression},
    {"CONCURRENCY", tok_concurrency},
    {"CONFIG", tok_config},
    {"CONNECTION", tok_connection},
    {"CONSISTENCY", tok_consistency},
    {"CONSISTENT", tok_consistent},
    {"CONSTRAINT", tok_constraint},
    {"CONSTRAINTS", tok_constraints},
    {"CONTEXT", tok_context},
    {"CONVERT", tok_convert},
    {"COPY", tok_copyKwd},
    {"CORRELATION", tok_correlation},
    {"CPU", tok_cpu},
    {"CREATE", tok_create},
    {"CROSS", tok_cross},
    {"CSV_BACKSLASH_ESCAPE", tok_csvBackslashEscape},
    {"CSV_DELIMITER", tok_csvDelimiter},
    {"CSV_HEADER", tok_csvHeader},
    {"CSV_NOT_NULL", tok_csvNotNull},
    {"CSV_NULL", tok_csvNull},
    {"CSV_SEPARATOR", tok_csvSeparator},
    {"CSV_TRIM_LAST_SEPARATORS", tok_csvTrimLastSeparators},
    {"CURRENT_DATE", tok_currentDate},
    {"CURRENT_ROLE", tok_currentRole},
    {"CURRENT_TIME", tok_currentTime},
    {"CURRENT_TIMESTAMP", tok_currentTs},
    {"CURRENT_USER", tok_currentUser},
    {"CURRENT", tok_current},
    {"CURTIME", tok_curTime},
    {"CYCLE", tok_cycle},
    {"DATA", tok_data},
    {"DATABASE", tok_database},
    {"DATABASES", tok_databases},
    {"DATE_ADD", tok_dateAdd},
    {"DATE_SUB", tok_dateSub},
    {"DATE", tok_dateType},
    {"DATETIME", tok_datetimeType},
    {"DAY_HOUR", tok_dayHour},
    {"DAY_MICROSECOND", tok_dayMicrosecond},
    {"DAY_MINUTE", tok_dayMinute},
    {"DAY_SECOND", tok_daySecond},
    {"DAY", tok_day},
    {"DDL", tok_ddl},
    {"DEALLOCATE", tok_deallocate},
    {"DEC", tok_decimalType},
    {"DECIMAL", tok_decimalType},
    {"DEFAULT", tok_defaultKwd},
    {"DEFINER", tok_definer},
    {"DELAY_KEY_WRITE", tok_delayKeyWrite},
    {"DELAYED", tok_delayed},
    {"DELETE", tok_deleteKwd},
    {"DEPENDENCY", tok_dependency},
    {"DEPTH", tok_depth},
    {"DESC", tok_desc},
    {"DESCRIBE", tok_describe},
    {"DIRECTORY", tok_directory},
    {"DISABLE", tok_disable},
    {"DISCARD", tok_discard},
    {"DISK", tok_disk},
    {"DISTINCT", tok_distinct},
    {"DISTINCTROW", tok_distinct},
    {"DIV", tok_div},
    {"DO", tok_do},
    {"DOT", tok_dotType},
    {"DOUBLE", tok_doubleType},
    {"DRAINER", tok_drainer},
    {"DROP", tok_drop},
    {"DUAL", tok_dual},
    {"DUMP", tok_dump},
    {"DUPLICATE", tok_duplicate},
    {"DYNAMIC", tok_dynamic},
    {"ELSE", tok_elseKwd},
    {"ENABLE", tok_enable},
    {"ENCLOSED", tok_enclosed},
    {"ENCRYPTION", tok_encryption},
    {"END", tok_end},
    {"ENFORCED", tok_enforced},
    {"ENGINE", tok_engine},
    {"ENGINES", tok_engines},
    {"ENUM", tok_enum},
    {"ERROR", tok_errorKwd},
    {"ERRORS", tok_identSQLErrors},
    {"ESCAPE", tok_escape},
    {"ESCAPED", tok_escaped},
    {"EVENT", tok_event},
    {"EVENTS", tok_events},
    {"EVOLVE", tok_evolve},
    {"EXACT", tok_exact},
    {"EXCEPT", tok_except},
    {"EXCHANGE", tok_exchange},
    {"EXCLUSIVE", tok_exclusive},
    {"EXECUTE", tok_execute},
    {"EXISTS", tok_exists},
    {"EXPANSION", tok_expansion},
    {"EXPIRE", tok_expire},
    {"EXPLAIN", tok_explain},
    {"EXPR_PUSHDOWN_BLACKLIST", tok_exprPushdownBlacklist},
    {"EXTENDED", tok_extended},
    {"EXTRACT", tok_extract},
    {"FALSE", tok_falseKwd},
    {"FAULTS", tok_faultsSym},
    {"FETCH", tok_fetch},
    {"FIELDS", tok_fields},
    {"FILE", tok_file},
    {"FIRST", tok_first},
    {"FIXED", tok_fixed},
    {"FLASHBACK", tok_flashback},
    {"FLOAT", tok_floatType},
    {"FLUSH", tok_flush},
    {"FOLLOWER", tok_follower},
    {"FOLLOWERS", tok_followers},
    {"FOLLOWER_CONSTRAINTS", tok_followerConstraints},
    {"FOLLOWING", tok_following},
    {"FOR", tok_forKwd},
    {"FORCE", tok_force},
    {"FOREIGN", tok_foreign},
    {"FORMAT", tok_format},
    {"FROM", tok_from},
    {"FULL", tok_full},
    {"FULLTEXT", tok_fulltext},
    {"FUNCTION", tok_function},
    {"GENERAL", tok_general},
    {"GENERATED", tok_generated},
    {"GET_FORMAT", tok_getFormat},
    {"GLOBAL", tok_global},
    {"GRANT", tok_grant},
    {"GRANTS", tok_grants},
    {"GROUP_CONCAT", tok_groupConcat},
    {"GROUP", tok_group},
    {"HASH", tok_hash},
    {"HAVING", tok_having},
    {"HELP", tok_help},
    {"HIGH_PRIORITY", tok_highPriority},
    {"HISTORY", tok_history},
    {"HISTOGRAM", tok_histogram},
    {"HOSTS", tok_hosts},
    {"HOUR_MICROSECOND", tok_hourMicrosecond},
    {"HOUR_MINUTE", tok_hourMinute},
    {"HOUR_SECOND", tok_hourSecond},
    {"HOUR", tok_hour},
    {"IDENTIFIED", tok_identified},
    {"IF", tok_ifKwd},
    {"IGNORE", tok_ignore},
    {"IMPORT", tok_importKwd},
    {"IMPORTS", tok_imports},
    {"IN", tok_in},
    {"INCREMENT", tok_increment},
    {"INCREMENTAL", tok_incremental},
    {"INDEX", tok_index},
    {"INDEXES", tok_indexes},
    {"INFILE", tok_infile},
    {"INNER", tok_inner},
    {"INPLACE", tok_inplace},
    {"INSERT_METHOD", tok_insertMethod},
    {"INSERT", tok_insert},
    {"INSTANCE", tok_instance},
    {"INSTANT", tok_instant},
    {"INT", tok_intType},
    {"INT1", tok_int1Type},
    {"INT2", tok_int2Type},
    {"INT3", tok_int3Type},
    {"INT4", tok_int4Type},
    {"INT8", tok_int8Type},
    {"INTEGER", tok_integerType},
    {"INTERNAL", tok_internal},
    {"INTERSECT", tok_intersect},
    {"INTERVAL", tok_interval},
    {"INTO", tok_into},
    {"INVISIBLE", tok_invisible},
    {"INVOKER", tok_invoker},
    {"IO", tok_io},
    {"IPC", tok_ipc},
    {"IS", tok_is},
    {"ISOLATION", tok_isolation},
    {"ISSUER", tok_issuer},
    {"JOB", tok_job},
    {"JOBS", tok_jobs},
    {"JOIN", tok_join},
    {"JSON_ARRAYAGG", tok_jsonArrayagg},
    {"JSON_OBJECTAGG", tok_jsonObjectAgg},
    {"JSON", tok_jsonType},
    {"KEY_BLOCK_SIZE", tok_keyBlockSize},
    {"KEY", tok_key},
    {"KEYS", tok_keys},
    {"KILL", tok_kill},
    {"LABELS", tok_labels},
    {"LANGUAGE", tok_language},
    {"LAST_BACKUP", tok_lastBackup},
    {"LAST", tok_last},
    {"LASTVAL", tok_lastval},
    {"LEADER", tok_leader},
    {"LEADER_CONSTRAINTS", tok_leaderConstraints},
    {"LEADING", tok_leading},
    {"LEARNER", tok_learner},
    {"LEARNER_CONSTRAINTS", tok_learnerConstraints},
    {"LEARNERS", tok_learners},
    {"LEFT", tok_left},
    {"LESS", tok_less},
    {"LEVEL", tok_level},
    {"LIKE", tok_like},
    {"LIMIT", tok_limit},
    {"LINEAR", tok_linear},
    {"LINES", tok_lines},
    {"LIST", tok_list},
    {"LOAD", tok_load},
    {"LOCAL", tok_local},
    {"LOCALTIME", tok_localTime},
    {"LOCALTIMESTAMP", tok_localTs},
    {"LOCATION", tok_location},
    {"LOCK", tok_lock},
    {"LOCKED", tok_locked},
    {"LOGS", tok_logs},
    {"LONG", tok_long},
    {"LONGBLOB", tok_longblobType},
    {"LONGTEXT", tok_longtextType},
    {"LOW_PRIORITY", tok_lowPriority},
    {"MASTER", tok_master},
    {"MATCH", tok_match},
    {"MAX_CONNECTIONS_PER_HOUR", tok_maxConnectionsPerHour},
    {"MAX_IDXNUM", tok_max_idxnum},
    {"MAX_MINUTES", tok_max_minutes},
    {"MAX_QUERIES_PER_HOUR", tok_maxQueriesPerHour},
    {"MAX_ROWS", tok_maxRows},
    {"MAX_UPDATES_PER_HOUR", tok_maxUpdatesPerHour},
    {"MAX_USER_CONNECTIONS", tok_maxUserConnections},
    {"MAX", tok_max},
    {"MAXVALUE", tok_maxValue},
    {"MB", tok_mb},
    {"MEDIUMBLOB", tok_mediumblobType},
    {"MEDIUMINT", tok_mediumIntType},
    {"MEDIUMTEXT", tok_mediumtextType},
    {"MEMORY", tok_memory},
    {"MERGE", tok_merge},
    {"MICROSECOND", tok_microsecond},
    {"MIN_ROWS", tok_minRows},
    {"MIN", tok_min},
    {"MINUTE_MICROSECOND", tok_minuteMicrosecond},
    {"MINUTE_SECOND", tok_minuteSecond},
    {"MINUTE", tok_minute},
    {"MINVALUE", tok_minValue},
    {"MOD", tok_mod},
    {"MODE", tok_mode},
    {"MODIFY", tok_modify},
    {"MONTH", tok_month},
    {"NAMES", tok_names},
    {"NATIONAL", tok_national},
    {"NATURAL", tok_natural},
    {"NCHAR", tok_ncharType},
    {"NEVER", tok_never},
    {"NEXT_ROW_ID", tok_next_row_id},
    {"NEXT", tok_next},
    {"NEXTVAL", tok_nextval},
    {"NO_WRITE_TO_BINLOG", tok_noWriteToBinLog},
    {"NO", tok_no},
    {"NOCACHE", tok_nocache},
    {"NOCYCLE", tok_nocycle},
    {"NODE_ID", tok_nodeID},
    {"NODE_STATE", tok_nodeState},
    {"NODEGROUP", tok_nodegroup},
    {"NOMAXVALUE", tok_nomaxvalue},
    {"NOMINVALUE", tok_nominvalue},
    {"NONCLUSTERED", tok_nonclustered},
    {"NONE", tok_none},
    {"NOT", tok_not},
    {"NOW", tok_now},
    {"NOWAIT", tok_nowait},
    {"NULL", tok_null},
    {"NULLS", tok_nulls},
    {"NUMERIC", tok_numericType},
    {"NVARCHAR", tok_nvarcharType},
    {"OF", tok_of},
    {"OFF", tok_off},
    {"OFFSET", tok_offset},
    {"ON_DUPLICATE", tok_onDuplicate},
    {"ON", tok_on},
    {"ONLINE", tok_online},
    {"ONLY", tok_only},
    {"OPEN", tok_open},
    {"OPT_RULE_BLACKLIST", tok_optRuleBlacklist},
    {"OPTIMISTIC", tok_optimistic},
    {"OPTIMIZE", tok_optimize},
    {"OPTION", tok_option},
    {"OPTIONAL", tok_optional},
    {"OPTIONALLY", tok_optionally},
    {"OR", tok_or},
    {"ORDER", tok_order},
    {"OUTER", tok_outer},
    {"OUTFILE", tok_outfile},
    {"PACK_KEYS", tok_packKeys},
    {"PAGE", tok_pageSym},
    {"PARSER", tok_parser},
    {"PARTIAL", tok_partial},
    {"PARTITION", tok_partition},
    {"PARTITIONING", tok_partitioning},
    {"PARTITIONS", tok_partitions},
    {"PASSWORD", tok_password},
    {"PERCENT", tok_percent},
    {"PER_DB", tok_per_db},
    {"PER_TABLE", tok_per_table},
    {"PESSIMISTIC", tok_pessimistic},
    {"PLACEMENT", tok_placement},
    {"PLAN", tok_plan},
    {"PLUGINS", tok_plugins},
    {"POLICY", tok_policy},
    {"POSITION", tok_position},
    {"PRE_SPLIT_REGIONS", tok_preSplitRegions},
    {"PRECEDING", tok_preceding},
    {"PREDICATE", tok_predicate},
    {"PRECISION", tok_precisionType},
    {"PREPARE", tok_prepare},
    {"PRESERVE", tok_preserve},
    {"PRIMARY", tok_primary},
    {"PRIMARY_REGION", tok_primaryRegion},
    {"PRIVILEGES", tok_privileges},
    {"PROCEDURE", tok_procedure},
    {"PROCESS", tok_process},
    {"PROCESSLIST", tok_processlist},
    {"PROFILE", tok_profile},
    {"PROFILES", tok_profiles},
    {"PROXY", tok_proxy},
    {"PUMP", tok_pump},
    {"PURGE", tok_purge},
    {"QUARTER", tok_quarter},
    {"QUERIES", tok_queries},
    {"QUERY", tok_query},
    {"QUICK", tok_quick},
    {"RANGE", tok_rangeKwd},
    {"RATE_LIMIT", tok_rateLimit},
    {"READ", tok_read},
    {"REAL", tok_realType},
    {"REBUILD", tok_rebuild},
    {"RECENT", tok_recent},
    {"RECOVER", tok_recover},
    {"RECURSIVE", tok_recursive},
    {"REDUNDANT", tok_redundant},
    {"REFERENCES", tok_references},
    {"REGEXP", tok_regexpKwd},
    {"REGION", tok_region},
    {"REGIONS", tok_regions},
    {"RELEASE", tok_release},
    {"RELOAD", tok_reload},
    {"REMOVE", tok_remove},
    {"RENAME", tok_rename},
    {"REORGANIZE", tok_reorganize},
    {"REPAIR", tok_repair},
    {"REPEAT", tok_repeat},
    {"REPEATABLE", tok_repeatable},
    {"REPLACE", tok_replace},
    {"REPLAYER", tok_replayer},
    {"REPLICA", tok_replica},
    {"REPLICAS", tok_replicas},
    {"REPLICATION", tok_replication},
    {"REQUIRE", tok_require},
    {"REQUIRED", tok_required},
    {"RESET", tok_reset},
    {"RESPECT", tok_respect},
    {"RESTART", tok_restart},
    {"RESTORE", tok_restore},
    {"RESTORES", tok_restores},
    {"RESTRICT", tok_restrict},
    {"REVERSE", tok_reverse},
    {"REVOKE", tok_revoke},
    {"RIGHT", tok_right},
    {"RLIKE", tok_rlike},
    {"ROLE", tok_role},
    {"ROLLBACK", tok_rollback},
    {"ROUTINE", tok_routine},
    {"ROW_COUNT", tok_rowCount},
    {"ROW_FORMAT", tok_rowFormat},
    {"ROW", tok_row},
    {"ROWS", tok_rows},
    {"RTREE", tok_rtree},
    {"RESUME", tok_resume},
    {"RUNNING", tok_running},
    {"S3", tok_s3},
    {"SAMPLES", tok_samples},
    {"SAMPLERATE", tok_sampleRate},
    {"SAN", tok_san},
    {"SCHEDULE", tok_schedule},
    {"SCHEMA", tok_database},
    {"SCHEMAS", tok_databases},
    {"SECOND_MICROSECOND", tok_secondMicrosecond},
    {"SECOND", tok_second},
    {"SECONDARY_ENGINE", tok_secondaryEngine},
    {"SECONDARY_LOAD", tok_secondaryLoad},
    {"SECONDARY_UNLOAD", tok_secondaryUnload},
    {"SECURITY", tok_security},
    {"SELECT", tok_selectKwd},
    {"SEND_CREDENTIALS_TO_TIKV", tok_sendCredentialsToTiKV},
    {"SEPARATOR", tok_separator},
    {"SEQUENCE", tok_sequence},
    {"SERIAL", tok_serial},
    {"SERIALIZABLE", tok_serializable},
    {"SESSION", tok_session},
    {"SET", tok_set},
    {"SETVAL", tok_setval},
    {"SHARD_ROW_ID_BITS", tok_shardRowIDBits},
    {"SHARE", tok_share},
    {"SHARED", tok_shared},
    {"SHOW", tok_show},
    {"SHUTDOWN", tok_shutdown},
    {"SIGNED", tok_signed},
    {"SIMPLE", tok_simple},
    {"SKIP", tok_skip},
    {"SKIP_SCHEMA_FILES", tok_skipSchemaFiles},
    {"SLAVE", tok_slave},
    {"SLOW", tok_slow},
    {"SMALLINT", tok_smallIntType},
    {"SNAPSHOT", tok_snapshot},
    {"SOME", tok_some},
    {"SOURCE", tok_source},
    {"SPATIAL", tok_spatial},
    {"SPLIT", tok_split},
    {"SQL_BIG_RESULT", tok_sqlBigResult},
    {"SQL_BUFFER_RESULT", tok_sqlBufferResult},
    {"SQL_CACHE", tok_sqlCache},
    {"SQL_CALC_FOUND_ROWS", tok_sqlCalcFoundRows},
    {"SQL_NO_CACHE", tok_sqlNoCache},
    {"SQL_SMALL_RESULT", tok_sqlSmallResult},
    {"SQL_TSI_DAY", tok_sqlTsiDay},
    {"SQL_TSI_HOUR", tok_sqlTsiHour},
    {"SQL_TSI_MINUTE", tok_sqlTsiMinute},
    {"SQL_TSI_MONTH", tok_sqlTsiMonth},
    {"SQL_TSI_QUARTER", tok_sqlTsiQuarter},
    {"SQL_TSI_SECOND", tok_sqlTsiSecond},
    {"SQL_TSI_WEEK", tok_sqlTsiWeek},
    {"SQL_TSI_YEAR", tok_sqlTsiYear},
    {"SQL", tok_sql},
    {"SSL", tok_ssl},
    {"STALENESS", tok_staleness},
    {"START", tok_start},
    {"STARTING", tok_starting},
    {"STATISTICS", tok_statistics},
    {"STATS_AUTO_RECALC", tok_statsAutoRecalc},
    {"STATS_BUCKETS", tok_statsBuckets},
    {"STATS_EXTENDED", tok_statsExtended},
    {"STATS_HEALTHY", tok_statsHealthy},
    {"STATS_HISTOGRAMS", tok_statsHistograms},
    {"STATS_TOPN", tok_statsTopN},
    {"STATS_META", tok_statsMeta},
    {"STATS_PERSISTENT", tok_statsPersistent},
    {"STATS_SAMPLE_PAGES", tok_statsSamplePages},
    {"STATS", tok_stats},
    {"STATUS", tok_status},
    {"STD", tok_stddevPop},
    {"STDDEV_POP", tok_stddevPop},
    {"STDDEV_SAMP", tok_stddevSamp},
    {"STDDEV", tok_stddevPop},
    {"STOP", tok_stop},
    {"STORAGE", tok_storage},
    {"STORED", tok_stored},
    {"STRAIGHT_JOIN", tok_straightJoin},
    {"STRICT", tok_strict},
    {"STRICT_FORMAT", tok_strictFormat},
    {"STRONG", tok_strong},
    {"SUBDATE", tok_subDate},
    {"SUBJECT", tok_subject},
    {"SUBPARTITION", tok_subpartition},
    {"SUBPARTITIONS", tok_subpartitions},
    {"SUBSTR", tok_substring},
    {"SUBSTRING", tok_substring},
    {"SUM", tok_sum},
    {"SUPER", tok_super},
    {"SWAPS", tok_swaps},
    {"SWITCHES", tok_switchesSym},
    {"SYSTEM", tok_system},
    {"SYSTEM_TIME", tok_systemTime},
    {"TABLE_CHECKSUM", tok_tableChecksum},
    {"TABLE", tok_tableKwd},
    {"TABLES", tok_tables},
    {"TABLESAMPLE", tok_tableSample},
    {"TABLESPACE", tok_tablespace},
    {"TELEMETRY", tok_telemetry},
    {"TELEMETRY_ID", tok_telemetryID},
    {"TEMPORARY", tok_temporary},
    {"TEMPTABLE", tok_temptable},
    {"TERMINATED", tok_terminated},
    {"TEXT", tok_textType},
    {"THAN", tok_than},
    {"THEN", tok_then},
    {"TIDB", tok_tidb},
    {"TIFLASH", tok_tiFlash},
    {"TIKV_IMPORTER", tok_tikvImporter},
    {"TIME", tok_timeType},
    {"TIMESTAMP", tok_timestampType},
    {"TIMESTAMPADD", tok_timestampAdd},
    {"TIMESTAMPDIFF", tok_timestampDiff},
    {"TINYBLOB", tok_tinyblobType},
    {"TINYINT", tok_tinyIntType},
    {"TINYTEXT", tok_tinytextType},
    {"TLS", tok_tls},
    {"TO", tok_to},
    {"TOKUDB_DEFAULT", tok_tokudbDefault},
    {"TOKUDB_FAST", tok_tokudbFast},
    {"TOKUDB_LZMA", tok_tokudbLzma},
    {"TOKUDB_QUICKLZ", tok_tokudbQuickLZ},
    {"TOKUDB_SMALL", tok_tokudbSmall},
    {"TOKUDB_SNAPPY", tok_tokudbSnappy},
    {"TOKUDB_UNCOMPRESSED", tok_tokudbUncompressed},
    {"TOKUDB_ZLIB", tok_tokudbZlib},
    {"TOP", tok_top},
    {"TOPN", tok_topn},
    {"TRACE", tok_trace},
    {"TRADITIONAL", tok_traditional},
    {"TRAILING", tok_trailing},
    {"TRANSACTION", tok_transaction},
    {"TRIGGER", tok_trigger},
    {"TRIGGERS", tok_triggers},
    {"TRIM", tok_trim},
    {"TRUE", tok_trueKwd},
    {"TRUNCATE", tok_truncate},
    {"TYPE", tok_tp},
    {"UNBOUNDED", tok_unbounded},
    {"UNCOMMITTED", tok_uncommitted},
    {"UNDEFINED", tok_undefined},
    {"UNICODE", tok_unicodeSym},
    {"UNION", tok_union},
    {"UNIQUE", tok_unique},
    {"UNKNOWN", tok_unknown},
    {"UNLOCK", tok_unlock},
    {"UNSIGNED", tok_unsigned},
    {"UPDATE", tok_update},
    {"USAGE", tok_usage},
    {"USE", tok_use},
    {"USER", tok_user},
    {"USING", tok_using},
    {"UTC_DATE", tok_utcDate},
    {"UTC_TIME", tok_utcTime},
    {"UTC_TIMESTAMP", tok_utcTimestamp},
    {"VALIDATION", tok_validation},
    {"VALUE", tok_value},
    {"VALUES", tok_values},
    {"VAR_POP", tok_varPop},
    {"VAR_SAMP", tok_varSamp},
    {"VARBINARY", tok_varbinaryType},
    {"VARCHAR", tok_varcharType},
    {"VARCHARACTER", tok_varcharacter},
    {"VARIABLES", tok_variables},
    {"VARIANCE", tok_varPop},
    {"VARYING", tok_varying},
    {"VERBOSE", tok_verboseType},
    {"VOTER", tok_voter},
    {"VOTER_CONSTRAINTS", tok_voterConstraints},
    {"VOTERS", tok_voters},
    {"VIEW", tok_view},
    {"VIRTUAL", tok_virtual},
    {"VISIBLE", tok_visible},
    {"WARNINGS", tok_warnings},
    {"WEEK", tok_week},
    {"WEIGHT_STRING", tok_weightString},
    {"WHEN", tok_when},
    {"WHERE", tok_where},
    {"WIDTH", tok_width},
    {"WITH", tok_with},
    {"WITHOUT", tok_without},
    {"WRITE", tok_write},
    {"X509", tok_x509},
    {"XOR", tok_xor},
    {"YEAR_MONTH", tok_yearMonth},
    {"YEAR", tok_yearType},
    {"ZEROFILL", tok_zerofill},
    {"WAIT", tok_wait},
};

// isInTokenMap indicates whether the target string is contained in tokenMap.
bool isInTokenMap(std::string target) { return tokenMap.find(target) != tokenMap.end(); }

// See https://dev.mysql.com/doc/refman/5.7/en/function-resolution.html for details
std::unordered_map<std::string, int> btFuncTokenMap = {
    {"ADDDATE", tok_builtinAddDate},
    {"BIT_AND", tok_builtinBitAnd},
    {"BIT_OR", tok_builtinBitOr},
    {"BIT_XOR", tok_builtinBitXor},
    {"CAST", tok_builtinCast},
    {"COUNT", tok_builtinCount},
    {"APPROX_COUNT_DISTINCT", tok_builtinApproxCountDistinct},
    {"APPROX_PERCENTILE", tok_builtinApproxPercentile},
    {"CURDATE", tok_builtinCurDate},
    {"CURTIME", tok_builtinCurTime},
    {"DATE_ADD", tok_builtinDateAdd},
    {"DATE_SUB", tok_builtinDateSub},
    {"EXTRACT", tok_builtinExtract},
    {"GROUP_CONCAT", tok_builtinGroupConcat},
    {"MAX", tok_builtinMax},
    {"MID", tok_builtinSubstring},
    {"MIN", tok_builtinMin},
    {"NOW", tok_builtinNow},
    {"POSITION", tok_builtinPosition},
    {"SESSION_USER", tok_builtinUser},
    {"STD", tok_builtinStddevPop},
    {"STDDEV", tok_builtinStddevPop},
    {"STDDEV_POP", tok_builtinStddevPop},
    {"STDDEV_SAMP", tok_builtinStddevSamp},
    {"SUBDATE", tok_builtinSubDate},
    {"SUBSTR", tok_builtinSubstring},
    {"SUBSTRING", tok_builtinSubstring},
    {"SUM", tok_builtinSum},
    {"SYSDATE", tok_builtinSysDate},
    {"SYSTEM_USER", tok_builtinUser},
    {"TRANSLATE", tok_builtinTranslate},
    {"TRIM", tok_builtinTrim},
    {"VARIANCE", tok_builtinVarPop},
    {"VAR_POP", tok_builtinVarPop},
    {"VAR_SAMP", tok_builtinVarSamp},
};

std::unordered_map<std::string, int> windowFuncTokenMap = {
    {"CUME_DIST", tok_cumeDist},
    {"DENSE_RANK", tok_denseRank},
    {"FIRST_VALUE", tok_firstValue},
    {"GROUPS", tok_groups},
    {"LAG", tok_lag},
    {"LAST_VALUE", tok_lastValue},
    {"LEAD", tok_lead},
    {"NTH_VALUE", tok_nthValue},
    {"NTILE", tok_ntile},
    {"OVER", tok_over},
    {"PERCENT_RANK", tok_percentRank},
    {"RANK", tok_rank},
    {"ROW_NUMBER", tok_rowNumber},
    {"WINDOW", tok_window},
};

// aliases are strings directly map to another string and use the same token.
std::unordered_map<std::string, std::string> aliases = {
    {"SCHEMA", "DATABASE"},
    {"SCHEMAS", "DATABASES"},
    {"DEC", "DECIMAL"},
    {"SUBSTR", "SUBSTRING"},
};

// hintedTokens is a set of tokens which recognizes a hint.
// According to https://dev.mysql.com/doc/refman/8.0/en/optimizer-hints.html,
// only SELECT, INSERT, REPLACE, UPDATE and DELETE accept optimizer hints.
// additionally we support CREATE and PARTITION for hints at table creation.
std::unordered_map<int, std::string> hintedTokens = {
    {tok_selectKwd, {}}, {tok_insert, {}}, {tok_replace, {}},   {tok_update, {}},
    {tok_deleteKwd, {}}, {tok_create, {}}, {tok_partition, {}},
};

std::unordered_map<std::string, int> hintTokenMap = {
    // MySQL 8.0 hint names
    {"JOIN_FIXED_ORDER", tok_hintJoinFixedOrder},
    {"JOIN_ORDER", tok_hintJoinOrder},
    {"JOIN_PREFIX", tok_hintJoinPrefix},
    {"JOIN_SUFFIX", tok_hintJoinSuffix},
    {"BKA", tok_hintBKA},
    {"NO_BKA", tok_hintNoBKA},
    {"BNL", tok_hintBNL},
    {"NO_BNL", tok_hintNoBNL},
    {"HASH_JOIN", tok_hintHashJoin},
    {"NO_HASH_JOIN", tok_hintNoHashJoin},
    {"MERGE", tok_hintMerge},
    {"NO_MERGE", tok_hintNoMerge},
    {"INDEX_MERGE", tok_hintIndexMerge},
    {"NO_INDEX_MERGE", tok_hintNoIndexMerge},
    {"MRR", tok_hintMRR},
    {"NO_MRR", tok_hintNoMRR},
    {"NO_ICP", tok_hintNoICP},
    {"NO_RANGE_OPTIMIZATION", tok_hintNoRangeOptimization},
    {"SKIP_SCAN", tok_hintSkipScan},
    {"NO_SKIP_SCAN", tok_hintNoSkipScan},
    {"SEMIJOIN", tok_hintSemijoin},
    {"NO_SEMIJOIN", tok_hintNoSemijoin},
    {"MAX_EXECUTION_TIME", tok_hintMaxExecutionTime},
    {"SET_VAR", tok_hintSetVar},
    {"RESOURCE_GROUP", tok_hintResourceGroup},
    {"QB_NAME", tok_hintQBName},

    // TiDB hint names
    {"AGG_TO_COP", tok_hintAggToCop},
    {"LIMIT_TO_COP", tok_hintLimitToCop},
    {"IGNORE_PLAN_CACHE", tok_hintIgnorePlanCache},
    {"HASH_AGG", tok_hintHashAgg},
    {"IGNORE_INDEX", tok_hintIgnoreIndex},
    {"INL_HASH_JOIN", tok_hintInlHashJoin},
    {"INL_JOIN", tok_hintInlJoin},
    {"INL_MERGE_JOIN", tok_hintInlMergeJoin},
    {"MEMORY_QUOTA", tok_hintMemoryQuota},
    {"NO_SWAP_JOIN_INPUTS", tok_hintNoSwapJoinInputs},
    {"QUERY_TYPE", tok_hintQueryType},
    {"READ_CONSISTENT_REPLICA", tok_hintReadConsistentReplica},
    {"READ_FROM_STORAGE", tok_hintReadFromStorage},
    {"BROADCAST_JOIN", tok_hintBCJoin},
    {"BROADCAST_JOIN_LOCAL", tok_hintBCJoinPreferLocal},
    {"MERGE_JOIN", tok_hintSMJoin},
    {"STREAM_AGG", tok_hintStreamAgg},
    {"SWAP_JOIN_INPUTS", tok_hintSwapJoinInputs},
    {"USE_INDEX_MERGE", tok_hintUseIndexMerge},
    {"USE_INDEX", tok_hintUseIndex},
    {"USE_PLAN_CACHE", tok_hintUsePlanCache},
    {"USE_TOJA", tok_hintUseToja},
    {"TIME_RANGE", tok_hintTimeRange},
    {"USE_CASCADES", tok_hintUseCascades},
    {"NTH_PLAN", tok_hintNthPlan},
    {"FORCE_INDEX", tok_hintForceIndex},

    // TiDB hint aliases
    {"TIDB_HJ", tok_hintHashJoin},
    {"TIDB_INLJ", tok_hintInlJoin},
    {"TIDB_SMJ", tok_hintSMJoin},

    // Other keywords
    {"OLAP", tok_hintOLAP},
    {"OLTP", tok_hintOLTP},
    {"TIKV", tok_hintTiKV},
    {"TIFLASH", tok_hintTiFlash},
    {"PARTITION", tok_hintPartition},
    {"FALSE", tok_hintFalse},
    {"TRUE", tok_hintTrue},
    {"MB", tok_hintMB},
    {"GB", tok_hintGB},
    {"DUPSWEEDOUT", tok_hintDupsWeedOut},
    {"FIRSTMATCH", tok_hintFirstMatch},
    {"LOOSESCAN", tok_hintLooseScan},
    {"MATERIALIZATION", tok_hintMaterialization},
};

int Scanner::isTokenIdentifier(std::string lit, int offset) {
    // An identifier before or after '.' means it is part of a qualified identifier.
    // We do not parse it as keyword.
    if (_reader->curr() == '.') {
        return 0;
    }

    return {};
}

}  // namespace parser